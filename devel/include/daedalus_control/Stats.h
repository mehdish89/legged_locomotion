// Generated by gencpp from file daedalus_control/Stats.msg
// DO NOT EDIT!


#ifndef DAEDALUS_CONTROL_MESSAGE_STATS_H
#define DAEDALUS_CONTROL_MESSAGE_STATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace daedalus_control
{
template <class ContainerAllocator>
struct Stats_
{
  typedef Stats_<ContainerAllocator> Type;

  Stats_()
    : effort(0.0)
    , velocity(0.0)
    , velocity_variation(0.0)
    , leg_x(0.0)
    , leg_y(0.0)
    , leg_z(0.0)  {
    }
  Stats_(const ContainerAllocator& _alloc)
    : effort(0.0)
    , velocity(0.0)
    , velocity_variation(0.0)
    , leg_x(0.0)
    , leg_y(0.0)
    , leg_z(0.0)  {
    }



   typedef float _effort_type;
  _effort_type effort;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _velocity_variation_type;
  _velocity_variation_type velocity_variation;

   typedef float _leg_x_type;
  _leg_x_type leg_x;

   typedef float _leg_y_type;
  _leg_y_type leg_y;

   typedef float _leg_z_type;
  _leg_z_type leg_z;




  typedef boost::shared_ptr< ::daedalus_control::Stats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::daedalus_control::Stats_<ContainerAllocator> const> ConstPtr;

}; // struct Stats_

typedef ::daedalus_control::Stats_<std::allocator<void> > Stats;

typedef boost::shared_ptr< ::daedalus_control::Stats > StatsPtr;
typedef boost::shared_ptr< ::daedalus_control::Stats const> StatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::daedalus_control::Stats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::daedalus_control::Stats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace daedalus_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'daedalus_control': ['/home/meit/catkin_ws/src/daedalus/src/daedalus_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::daedalus_control::Stats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::daedalus_control::Stats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::daedalus_control::Stats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::daedalus_control::Stats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::daedalus_control::Stats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::daedalus_control::Stats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::daedalus_control::Stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1371118692462a07da2dac693adb28c";
  }

  static const char* value(const ::daedalus_control::Stats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1371118692462a0ULL;
  static const uint64_t static_value2 = 0x7da2dac693adb28cULL;
};

template<class ContainerAllocator>
struct DataType< ::daedalus_control::Stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daedalus_control/Stats";
  }

  static const char* value(const ::daedalus_control::Stats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::daedalus_control::Stats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 effort\n\
float32 velocity\n\
float32 velocity_variation\n\
float32 leg_x\n\
float32 leg_y\n\
float32 leg_z\n\
";
  }

  static const char* value(const ::daedalus_control::Stats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::daedalus_control::Stats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.effort);
      stream.next(m.velocity);
      stream.next(m.velocity_variation);
      stream.next(m.leg_x);
      stream.next(m.leg_y);
      stream.next(m.leg_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Stats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::daedalus_control::Stats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::daedalus_control::Stats_<ContainerAllocator>& v)
  {
    s << indent << "effort: ";
    Printer<float>::stream(s, indent + "  ", v.effort);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_variation: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_variation);
    s << indent << "leg_x: ";
    Printer<float>::stream(s, indent + "  ", v.leg_x);
    s << indent << "leg_y: ";
    Printer<float>::stream(s, indent + "  ", v.leg_y);
    s << indent << "leg_z: ";
    Printer<float>::stream(s, indent + "  ", v.leg_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAEDALUS_CONTROL_MESSAGE_STATS_H
