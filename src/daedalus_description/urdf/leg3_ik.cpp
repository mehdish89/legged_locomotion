/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-08-03 15:42:58.055778
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKcos(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.029062075)*x5);
x11=((0.707106781186548)*x5);
x12=((0.0171)*x0);
x13=((0.017536265)*x0);
x14=((0.707106781186548)*x6);
x15=((1.0)*x0);
x16=((0.029062075)*x6);
x17=((0.017536265)*x7);
x18=((0.0171)*x7);
x19=((0.02080007)*x4);
x20=((0.0742)*x7);
x21=((1.0)*x7);
x22=((0.05639997)*x1);
x23=((0.0742)*x0);
x24=(x2*x4);
x25=(x3*x4);
x26=(x1*x2);
x27=(x1*x3);
x28=((0.017536265)*x24);
x29=((0.017536265)*x27);
x30=((1.0)*x24);
x31=((((-1.0)*x30))+x27);
x32=((((-1.0)*x27))+x30);
x33=((((-0.017536265)*x26))+(((-0.017536265)*x25)));
x34=((((-1.0)*x26))+(((-1.0)*x25)));
x35=((((-1.0)*x15*x27))+((x0*x24)));
x36=((((-1.0)*x21*x24))+((x27*x7)));
x37=(x7*((x25+x26)));
x38=(x13*(((((-1.0)*x24))+x27)));
x39=(x17*(((((-1.0)*x24))+x27)));
x40=(x13*((x25+x26)));
x41=(x15*((x25+x26)));
x42=(x17*((x25+x26)));
x43=((-1.0)*x41);
x44=(x21*(((((-1.0)*x26))+(((-1.0)*x25)))));
x45=(x43*x6);
eetrans[0]=((-0.0249)+((x0*x19))+((x10*x35))+(((-1.0)*x0*x22))+(((-1.0)*x12*x24))+((x23*x26))+((x23*x25))+((x16*x43))+(((0.0002)*x0))+(((-1.0)*x16*x35))+(((-1.0)*x10*x41))+(((-0.0313)*x7))+((x40*x6))+((x38*x5))+((x38*x6))+((x12*x27))+(((-1.0)*x40*x5)));
eetrans[1]=(((x18*x27))+(((-1.0)*x42*x5))+((x19*x7))+((x10*x44))+((x16*x36))+(((0.0002)*x7))+((x42*x6))+(((-1.0)*x10*x36))+(((-1.0)*x18*x24))+(((-1.0)*x16*x37))+(((-1.0)*x22*x7))+((x39*x6))+((x39*x5))+(((0.0313)*x0))+((x20*x26))+((x20*x25)));
eetrans[2]=((0.0586)+(((-0.0742)*x24))+(((-0.0171)*x25))+(((-0.0171)*x26))+((x10*x32))+((x16*x34))+(((-1.0)*x10*x34))+((x33*x5))+((x33*x6))+(((-1.0)*x16*x31))+((x5*(((((-1.0)*x29))+x28))))+(((0.05639997)*x4))+(((0.02080007)*x1))+(((0.0742)*x27))+((x6*(((((-1.0)*x28))+x29)))));
eerot[0]=(((x8*((((x11*x41))+((x11*x35))+((x14*x43))+((x14*x35))))))+((x7*x9)));
IkReal x46=((1.0)*x14);
IkReal x47=((1.0)*x11);
eerot[1]=(((x8*(((((-1.0)*x36*x46))+(((-1.0)*x36*x47))+(((-1.0)*x37*x46))+(((-1.0)*x44*x47))))))+(((-1.0)*x15*x9)));
IkReal x48=((1.0)*x14);
IkReal x49=((1.0)*x11);
eerot[2]=(x8*(((((-1.0)*x31*x48))+(((-1.0)*x32*x49))+(((-1.0)*x34*x48))+(((-1.0)*x34*x49)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0249)+px);
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.0586)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j10eval[2];
j10eval[0]=((px*px)+(py*py));
j10eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10, j11, j12, j13, j14]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x50=((1.0)*(x52.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x53=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x53.valid){
continue;
}
if( (((0.0313)*(x53.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0313)*(x53.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x51=IKasin(((0.0313)*(x53.value)));
j10array[0]=((((-1.0)*x50))+(((-1.0)*x51)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+x51+(((-1.0)*x50)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
sj14array[0]=(((r01*sj10))+((cj10*r00)));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x54=py*py;
IkReal x55=pz*pz;
IkReal x56=px*px;
IkReal x57=(cj10*r00);
IkReal x58=((0.1252)*pz);
IkReal x59=(px*r00);
IkReal x60=(cj10*r01);
IkReal x61=((0.2504)*px);
IkReal x62=(cj10*r02);
IkReal x63=(pz*r02);
IkReal x64=((0.306745862470137)*pz);
IkReal x65=(r01*sj10);
IkReal x66=(r00*sj10);
IkReal x67=(py*r01);
IkReal x68=((0.2504)*py);
IkReal x69=(r02*sj10);
IkReal x70=((0.163835650769511)*pz);
IkReal x71=((0.165435650769511)*pz);
IkReal x72=((0.1252)*py);
IkReal x73=((8.0)*pz);
IkReal x74=((0.330236210769511)*pz);
IkReal x75=((0.144453897529863)*pz);
IkReal x76=((0.2504)*pz);
IkReal x77=((4.0)*pz);
IkReal x78=((0.331836210769511)*pz);
IkReal x79=((0.1252)*px);
IkReal x80=((0.0016)*pz);
IkReal x81=((0.00238048699268472)*x57);
IkReal x82=((0.0760538975298634)*x63);
IkReal x83=((0.00238048699268472)*x65);
IkReal x84=((0.0760538975298634)*x67);
IkReal x85=((0.0760538975298634)*x59);
IkReal x86=(r01*x79);
IkReal x87=(r00*x72);
IkReal x88=((0.0016)*x63);
IkReal x89=((5.008e-5)*x65);
IkReal x90=((5.008e-5)*x57);
IkReal x91=((0.0016)*x59);
IkReal x92=((0.0016)*x67);
IkReal x93=(r00*x68);
IkReal x94=(r01*x61);
IkReal x95=((0.0117420654953153)*x57);
IkReal x96=((0.0117420654953153)*x65);
IkReal x97=((0.375145862470137)*x59);
IkReal x98=((0.375145862470137)*x67);
IkReal x99=((0.375145862470137)*x63);
IkReal x100=((2.0)*x55);
IkReal x101=((4.0)*x54);
IkReal x102=(px*x69);
IkReal x103=((2.0)*x54);
IkReal x104=((2.0)*x56);
IkReal x105=((4.0)*px*py);
IkReal x106=((4.0)*x55);
IkReal x107=((4.0)*x56);
IkReal x108=((8.0)*px*py);
IkReal x109=(x67*x77);
IkReal x110=(x58*x65);
IkReal x111=(r02*x100);
IkReal x112=(x57*x58);
IkReal x113=(x59*x77);
IkReal x114=(x62*x79);
IkReal x115=(x69*x72);
IkReal x116=(r02*x103);
IkReal x117=(r02*x104);
IkReal x118=((0.306745862470137)*py*x62);
IkReal x119=(x64*x66);
IkReal x120=(x60*x64);
IkReal x121=((0.306745862470137)*x102);
IkReal x122=(x61*x62);
IkReal x123=((0.0016)*py*x62);
IkReal x124=(r02*x107);
IkReal x125=(r02*x101);
IkReal x126=(x68*x69);
IkReal x127=(x66*x80);
IkReal x128=(x59*x73);
IkReal x129=(x67*x73);
IkReal x130=(x60*x80);
IkReal x131=(x57*x76);
IkReal x132=(r02*x106);
IkReal x133=((0.0016)*x102);
IkReal x134=(x65*x76);
IkReal x135=(x60*x75);
IkReal x136=((0.144453897529863)*x102);
IkReal x137=(x66*x75);
IkReal x138=((0.144453897529863)*py*x62);
IkReal x139=(x100*x60);
IkReal x140=(x104*x66);
IkReal x141=(x105*x65);
IkReal x142=(x104*x60);
IkReal x143=((4.0)*px*sj10*x63);
IkReal x144=(x103*x60);
IkReal x145=(x103*x66);
IkReal x146=(py*x62*x77);
IkReal x147=(x100*x66);
IkReal x148=(x105*x57);
IkReal x149=(x101*x66);
IkReal x150=(x106*x66);
IkReal x151=(x101*x60);
IkReal x152=(x108*x57);
IkReal x153=(py*x62*x73);
IkReal x154=((8.0)*px*sj10*x63);
IkReal x155=(x107*x66);
IkReal x156=(x108*x65);
IkReal x157=(x107*x60);
IkReal x158=(x106*x60);
IkReal x159=(x120+x121);
IkReal x160=(x119+x118);
IkReal x161=(x137+x138);
IkReal x162=(x135+x136);
IkReal x163=(x82+x83+x81+x84+x85);
IkReal x164=(x99+x98+x95+x97+x96);
IkReal x165=(x117+x116+x115+x114);
IkReal x166=(x113+x112+x111+x110+x109);
IkReal x167=(x126+x127+x124+x125+x122+x123);
IkReal x168=(x140+x141+x142+x143+x139+x86);
IkReal x169=(x144+x145+x146+x147+x148+x87);
IkReal x170=(x157+x156+x155+x154+x158+x94);
IkReal x171=(x134+x131+x130+x133+x132+x128+x129);
IkReal x172=(x153+x152+x151+x150+x149+x88+x89+x91+x90+x93+x92);
IkReal x173=((((-1.0)*x167))+(((-0.0285433152553719)*r02))+x171+(((0.030647623547021)*x66))+(((-0.030647623547021)*x60)));
IkReal x174=((((0.0128499669419205)*x60))+(((0.0143106156175431)*r02))+(((-1.0)*x171))+(((-0.0128499669419205)*x66))+x167);
IkReal x175=((((0.00939317190597867)*x66))+(((-1.0)*x166))+(((-1.0)*x163))+(((-0.00939317190597867)*x60))+(((-0.331836210769511)*x102))+(((-1.0)*x60*x78))+x165+(((0.0133758287778559)*r02))+((x66*x78))+(((0.331836210769511)*py*x62)));
IkReal x176=((((-1.0)*x165))+(((-1.0)*x163))+(((-0.330236210769511)*x102))+(((-1.0)*x60*x74))+x166+(((-0.00936275034696673)*x66))+(((0.00936275034696673)*x60))+(((0.330236210769511)*py*x62))+(((-0.0132434142935481)*r02))+((x66*x74)));
IkReal x177=((((-1.0)*x164))+(((-1.0)*x166))+(((-1.0)*x66*x70))+(((-0.163835650769511)*py*x62))+x165+((x60*x70))+(((-0.0139020928613663)*r02))+(((-0.012281754014483)*x66))+(((0.163835650769511)*x102))+(((0.012281754014483)*x60)));
IkReal x178=((((-1.0)*x165))+(((-1.0)*x164))+(((-1.0)*x66*x71))+(((0.0138362386010585)*r02))+(((-0.0124318123594711)*x60))+x166+(((-0.165435650769511)*py*x62))+((x60*x71))+(((0.165435650769511)*x102))+(((0.0124318123594711)*x66)));
IkReal x179=((((-0.0266189230714039)*x60))+(((-1.0)*x170))+x172+(((-0.0187559222529454)*r02))+(((0.0266189230714039)*x66)));
IkReal x180=((((-0.0277386514624249)*x66))+(((-1.0)*x170))+x172+(((0.0247135663739541)*r02))+(((0.0277386514624249)*x60)));
IkReal x181=((((0.00416178413091431)*x65))+(((-1.0)*x159))+(((-1.0)*x168))+(((0.0142450647578399)*x66))+(((0.132964349230489)*x67))+(((0.132964349230489)*x63))+x169+x160+(((0.132964349230489)*x59))+(((-0.0142450647578399)*x60))+(((0.0153851609460045)*r02))+(((0.00416178413091431)*x57)));
IkReal x182=((((-1.0)*x159))+(((-1.0)*x169))+(((0.0142979304975321)*x60))+x168+x160+(((0.00411170413091431)*x57))+(((0.00411170413091431)*x65))+(((0.131364349230489)*x67))+(((0.131364349230489)*x63))+(((0.131364349230489)*x59))+(((-0.0142979304975321)*x66))+(((-0.0152624626010165)*r02)));
IkReal x183=((((-0.00714830056661765)*x66))+(((-0.00645387425046621)*r02))+(((-1.0)*x169))+(((-1.0)*x161))+(((-0.00109663339708569)*x65))+(((0.00714830056661765)*x60))+(((-0.00109663339708569)*x57))+(((-0.0350362107695108)*x63))+(((-0.0350362107695108)*x67))+x168+x162+(((-0.0350362107695108)*x59)));
IkReal x184=((((-1.0)*x168))+(((-1.0)*x161))+(((-0.00716199505092546)*x60))+x169+x162+(((0.00716199505092546)*x66))+(((-0.00104655339708569)*x65))+(((-0.0334362107695108)*x59))+(((-0.00104655339708569)*x57))+(((-0.0334362107695108)*x63))+(((-0.0334362107695108)*x67))+(((0.00639609269145427)*r02)));
IkReal gconst40=x175;
IkReal gconst41=x179;
IkReal gconst42=x176;
IkReal gconst43=x181;
IkReal gconst44=x173;
IkReal gconst45=x182;
IkReal gconst46=x175;
IkReal gconst47=x179;
IkReal gconst48=x176;
IkReal gconst49=x181;
IkReal gconst50=x173;
IkReal gconst51=x182;
IkReal gconst52=x183;
IkReal gconst53=x174;
IkReal gconst54=x184;
IkReal gconst55=x177;
IkReal gconst56=x180;
IkReal gconst57=x178;
IkReal gconst58=x183;
IkReal gconst59=x174;
IkReal gconst60=x184;
IkReal gconst61=x177;
IkReal gconst62=x180;
IkReal gconst63=x178;
IkReal x185=(gconst42*gconst43);
IkReal x186=(gconst45*gconst46);
IkReal x187=((1.0)*gconst52);
IkReal x188=(gconst46*gconst57);
IkReal x189=(gconst41*gconst62);
IkReal x190=(gconst53*gconst57);
IkReal x191=(gconst50*gconst58);
IkReal x192=(gconst54*gconst55);
IkReal x193=((1.0)*gconst59);
IkReal x194=(gconst48*gconst61);
IkReal x195=(gconst40*gconst57);
IkReal x196=(gconst50*gconst53);
IkReal x197=(gconst43*gconst54);
IkReal x198=(gconst46*gconst51);
IkReal x199=(gconst42*gconst47);
IkReal x200=(gconst56*gconst61);
IkReal x201=(gconst41*gconst45);
IkReal x202=(gconst45*gconst53);
IkReal x203=((1.0)*gconst60);
IkReal x204=(gconst42*gconst55);
IkReal x205=(gconst44*gconst49);
IkReal x206=(gconst54*gconst59);
IkReal x207=((1.0)*gconst54);
IkReal x208=(gconst46*gconst62);
IkReal x209=((1.0)*gconst40);
IkReal x210=(gconst41*gconst50);
IkReal x211=(gconst46*gconst63);
IkReal x212=(gconst58*gconst63);
IkReal x213=(gconst58*gconst62);
IkReal x214=(gconst45*gconst52);
IkReal x215=(gconst48*gconst49);
IkReal x216=(gconst51*gconst58);
IkReal x217=(gconst49*gconst60);
IkReal x218=(gconst41*gconst57);
IkReal x219=(gconst42*gconst59);
IkReal x220=(gconst49*gconst56);
IkReal x221=(gconst44*gconst61);
IkReal x222=(gconst46*gconst50);
IkReal x223=(gconst52*gconst57);
IkReal x224=(gconst47*gconst54);
IkReal x225=(gconst40*gconst45);
IkReal x226=(gconst60*gconst61);
IkReal x227=(gconst53*gconst62);
IkReal x228=((1.0)*x215);
IkReal x229=((1.0)*gconst42*gconst56);
IkReal x230=((1.0)*gconst47*gconst61);
IkReal x231=((1.0)*gconst42*gconst44);
IkReal x232=((1.0)*gconst47*gconst49);
op[0]=(((x190*x213))+((x200*x206))+(((-1.0)*gconst61*x192*x203))+((x223*x226))+(((-1.0)*gconst56*x207*x213))+(((-1.0)*gconst57*x187*x212))+(((-1.0)*gconst61*x190*x193))+((x192*x212)));
op[1]=(((x194*x223))+(((-1.0)*gconst44*x207*x213))+((x204*x212))+((x195*x226))+((x206*x220))+((x206*x221))+(((-1.0)*gconst56*x191*x207))+((x188*x227))+((x197*x212))+(((-1.0)*gconst63*x187*x188))+((x202*x213))+(((-1.0)*x190*x230))+((x214*x226))+(((-1.0)*x213*x229))+(((-1.0)*gconst61*x203*x204))+(((-1.0)*gconst61*x193*x218))+(((-1.0)*gconst57*x187*x216))+(((-1.0)*gconst61*x193*x202))+(((-1.0)*gconst49*x192*x203))+(((-1.0)*gconst45*x187*x212))+(((-1.0)*gconst49*x190*x193))+((x217*x223))+((x190*x191))+((x200*x224))+((x192*x216))+((x192*x211))+(((-1.0)*x195*x212))+(((-1.0)*gconst56*x207*x208))+((x200*x219))+((gconst57*gconst58*x189))+(((-1.0)*gconst61*x197*x203))+(((-1.0)*x192*x194)));
op[2]=((((-1.0)*x213*x231))+(((-1.0)*gconst61*x185*x203))+((x204*x216))+((x204*x211))+((x191*x218))+((x225*x226))+(((-1.0)*gconst49*x193*x202))+((x214*x217))+(((-1.0)*x191*x229))+((x205*x206))+(((-1.0)*gconst44*x207*x208))+(((-1.0)*x192*x228))+((x197*x216))+((x197*x211))+(((-1.0)*gconst49*x193*x218))+(((-1.0)*gconst49*x197*x203))+((x215*x223))+(((-1.0)*x190*x232))+(((-1.0)*x194*x197))+(((-1.0)*x202*x230))+((x188*x196))+(((-1.0)*gconst63*x186*x187))+((x188*x189))+(((-1.0)*gconst49*x203*x204))+(((-1.0)*x208*x229))+((x191*x202))+(((-1.0)*gconst44*x191*x207))+((x186*x227))+((x219*x221))+((x219*x220))+((x220*x224))+((x192*x198))+(((-1.0)*gconst61*x193*x201))+((x194*x195))+(((-1.0)*x194*x204))+(((-1.0)*gconst45*x187*x216))+(((-1.0)*gconst63*x188*x209))+((gconst45*gconst58*x189))+((x221*x224))+(((-1.0)*gconst45*x209*x212))+(((-1.0)*x218*x230))+(((-1.0)*x195*x216))+((x194*x214))+((x199*x200))+((x185*x212))+((x195*x217))+(((-1.0)*gconst56*x207*x222))+(((-1.0)*gconst51*x187*x188)));
op[3]=(((x194*x225))+((x186*x189))+((x205*x224))+(((-1.0)*x201*x230))+((x198*x204))+(((-1.0)*gconst49*x193*x201))+((x214*x215))+((x186*x196))+(((-1.0)*x185*x194))+(((-1.0)*x191*x231))+(((-1.0)*x202*x232))+(((-1.0)*gconst51*x186*x187))+((x199*x221))+((x199*x220))+((x205*x219))+(((-1.0)*x222*x229))+((x191*x201))+(((-1.0)*x208*x231))+(((-1.0)*gconst49*x185*x203))+((x217*x225))+((x188*x210))+(((-1.0)*gconst45*x209*x216))+(((-1.0)*x218*x232))+(((-1.0)*x204*x228))+((x197*x198))+(((-1.0)*gconst44*x207*x222))+(((-1.0)*gconst51*x188*x209))+(((-1.0)*gconst63*x186*x209))+((x185*x211))+((x185*x216))+((x195*x215))+(((-1.0)*x197*x228)));
op[4]=((((-1.0)*x201*x232))+((x215*x225))+((x185*x198))+(((-1.0)*gconst51*x186*x209))+((x186*x210))+((x199*x205))+(((-1.0)*x185*x228))+(((-1.0)*x222*x231)));
polyroots4(op,zeror,numroots);
IkReal j12array[4], cj12array[4], sj12array[4], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[4]={true,true,true,true};
_nj12 = 4;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x233=IKPowWithIntegerCheck(IKsign((((((((r00*sj10*sj12*(pz*pz)))+(((0.0004)*px*r00*sj12))+(((-1.0)*cj12*r02*(px*px)))+(((0.0626)*cj10*pz*r00))+(((-1.0)*cj10*r01*sj12*(px*px)))+(((0.00766190588675525)*cj12*r00*sj10))+(((1.252e-5)*r01*sj10*sj12))+(((0.00617839159348852)*r02*sj12))+(((2.0)*cj10*py*pz*r02*sj12))+((cj10*r01*sj12*(py*py)))+(((2.0)*px*pz*r00))+(((-2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*py*r02*sj10))+(((2.0)*cj10*px*py*r00*sj12))+(((0.0626)*cj10*cj12*pz*r00))+((r00*sj10*sj12*(py*py)))+(((-0.0004)*cj12*pz*r00*sj10))+(((-0.00713582881384299)*r02))+(((-0.0004)*cj10*cj12*py*r02))+(((0.0004)*py*r01*sj12))+(((-0.00766190588675525)*cj10*r01))+(((-1.0)*cj12*r02*(py*py)))+(((2.0)*cj12*px*pz*r00))+(((-0.0626)*cj12*py*r02*sj10))+((cj12*r02*(pz*pz)))+(((-0.0626)*cj10*cj12*px*r02))+(((-0.0626)*cj10*px*r02))+(((0.00766190588675525)*r00*sj10))+(((0.0004)*px*r02*sj10))+(((-0.00766190588675525)*cj10*cj12*r01))+(((0.0004)*pz*r02*sj12))+(((0.0626)*py*r00*sj12))+(((0.0004)*cj10*cj12*pz*r01))+(((0.0004)*cj12*px*r02*sj10))+(((-0.0004)*cj10*py*r02))+(((-0.0626)*px*r01*sj12))+(((1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r02*sj10*sj12))+(((-0.0004)*pz*r00*sj10))+(((2.0)*cj12*py*pz*r01))+(((-1.0)*cj10*r01*sj12*(pz*pz)))+(((0.0004)*cj10*pz*r01))+(((0.00693466286560622)*cj10*r01*sj12))+(((0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r02*(px*px)))+(((-0.00713582881384299)*cj12*r02))+(((2.0)*py*pz*r01))+(((-1.0)*r00*sj10*sj12*(px*px)))+(((-1.0)*r02*(py*py)))+(((0.0626)*pz*r01*sj10))+(((-0.00693466286560622)*r00*sj10*sj12))+((r02*(pz*pz)))))*(((((-1.0)*r00*sj10*sj12*(pz*pz)))+(((0.0626)*cj12*py*r02*sj10))+(((-2.0)*cj10*px*py*r00*sj12))+(((-2.0)*cj12*py*pz*r01))+((cj10*r01*sj12*(px*px)))+(((-0.0626)*cj10*pz*r00))+(((0.0626)*py*r02*sj10))+(((-0.0004)*px*r00*sj12))+(((-0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r00*sj10*sj12*(py*py)))+(((-0.00468898056323635)*cj10*cj12*r01))+(((2.0)*px*pz*r02*sj10*sj12))+((cj10*r01*sj12*(pz*pz)))+(((0.00468898056323635)*r00*sj10))+(((-0.0004)*px*r02*sj10))+((cj12*r02*(px*px)))+(((-2.0)*cj12*px*pz*r00))+((cj12*r02*(py*py)))+(((2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*cj10*cj12*pz*r00))+((r02*(py*py)))+(((-0.00468898056323635)*cj10*r01))+((r02*(px*px)))+(((-0.0004)*cj10*cj12*pz*r01))+(((-0.0626)*py*r00*sj12))+(((0.0626)*cj10*px*r02))+(((0.00357757390438578)*cj10*r01*sj12))+((r00*sj10*sj12*(px*px)))+(((-0.0004)*py*r01*sj12))+(((0.0004)*cj10*cj12*py*r02))+(((-0.0004)*pz*r02*sj12))+(((0.0004)*cj10*py*r02))+(((0.0004)*cj12*pz*r00*sj10))+(((-1.0)*cj12*r02*(pz*pz)))+(((0.00665481076785099)*r02))+(((0.0004)*pz*r00*sj10))+(((-1.252e-5)*r01*sj10*sj12))+(((-1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r00))+(((0.00468898056323635)*cj12*r00*sj10))+(((-0.0626)*pz*r01*sj10))+(((0.0626)*cj10*cj12*px*r02))+(((0.0626)*px*r01*sj12))+(((-1.0)*cj10*r01*sj12*(py*py)))+(((-2.0)*cj10*py*pz*r02*sj12))+(((-2.0)*py*pz*r01))+(((0.00665481076785099)*cj12*r02))+(((-0.0004)*cj10*pz*r01))+(((-0.00321249173548012)*r02*sj12))+(((-0.0004)*cj12*px*r02*sj10))+(((-1.0)*r02*(pz*pz)))+(((-0.00357757390438578)*r00*sj10*sj12))))))+(((((((0.00321249173548012)*cj10*r01*sj12))+(((-0.00665473076785099)*cj10*r01))+(((2.0)*cj10*cj12*px*py*r00))+(((-0.00468898056323635)*r02))+(((-0.0626)*cj12*px*r01))+(((0.0004)*pz*r02))+(((-0.0626)*cj10*pz*r00*sj12))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((0.00357765390438578)*r02*sj12))+(((-1.0)*cj10*r01*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((0.00665473076785099)*cj12*r00*sj10))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*r00))+(((1.252e-5)*cj10*cj12*r00))+(((-0.00468898056323635)*cj12*r02))+((r00*sj10*(pz*pz)))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+(((0.0626)*py*r02*sj10*sj12))+(((2.0)*cj10*py*pz*r02))+(((1.252e-5)*cj12*r01*sj10))+(((-2.0)*px*py*r01*sj10))+(((-0.00665473076785099)*cj10*cj12*r01))+((r00*sj10*(py*py)))+((cj10*cj12*r01*(py*py)))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.0004)*cj12*pz*r02))+(((-0.00321249173548012)*r00*sj10*sj12))+((r02*sj12*(py*py)))+((r02*sj12*(px*px)))+(((-1.0)*r00*sj10*(px*px)))+(((0.0004)*px*r00))+((cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((-1.0)*cj10*r01*(pz*pz)))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((1.252e-5)*r01*sj10))+(((-2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*px*r00))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((2.0)*cj10*px*py*r00))+(((0.00665473076785099)*r00*sj10))+(((0.0004)*cj12*py*r01))+((cj12*r00*sj10*(pz*pz)))))*(((((-2.0)*cj10*cj12*py*pz*r02))+(((0.00693458286560622)*r02*sj12))+(((-1.0)*r02*sj12*(py*py)))+(((2.0)*cj12*px*py*r01*sj10))+(((-1.0)*r00*sj10*(py*py)))+(((2.0)*px*py*r01*sj10))+(((-1.252e-5)*r01*sj10))+(((0.0004)*cj10*pz*r01*sj12))+(((1.0)*cj10*r01*(px*px)))+(((2.0)*cj12*px*pz*r02*sj10))+(((-0.00617839159348852)*cj10*r01*sj12))+(((-1.252e-5)*cj10*cj12*r00))+(((-1.0)*r02*sj12*(px*px)))+(((-0.0004)*pz*r00*sj10*sj12))+(((0.0626)*cj10*pz*r00*sj12))+(((0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj10*py*pz*r02))+(((0.0626)*px*r01))+(((-0.0004)*py*r01))+(((0.00713574881384299)*cj10*cj12*r01))+(((-0.0626)*cj12*py*r00))+(((1.0)*r00*sj10*(px*px)))+(((-0.0004)*px*r00))+(((-1.0)*cj12*r00*sj10*(pz*pz)))+(((-0.0626)*cj10*px*r02*sj12))+(((-0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj10*cj12*r01*(py*py)))+(((-0.0004)*pz*r02))+(((0.00617839159348852)*r00*sj10*sj12))+(((-0.00766190588675525)*r02))+(((-0.0626)*py*r02*sj10*sj12))+(((-0.00766190588675525)*cj12*r02))+(((0.0004)*px*r02*sj10*sj12))+(((-1.0)*r00*sj10*(pz*pz)))+(((-1.0)*cj10*r01*(py*py)))+(((2.0)*py*pz*r01*sj12))+(((-1.252e-5)*cj10*r00))+(((-2.0)*cj10*cj12*px*py*r00))+(((-2.0)*cj10*px*py*r00))+(((2.0)*px*pz*r02*sj10))+(((-0.00713574881384299)*r00*sj10))+(((1.0)*cj12*r00*sj10*(px*px)))+(((-0.0004)*cj12*px*r00))+(((-0.00713574881384299)*cj12*r00*sj10))+(((0.0626)*cj12*px*r01))+(((2.0)*px*pz*r00*sj12))+(((1.0)*cj10*cj12*r01*(px*px)))+(((-1.0)*cj12*r00*sj10*(py*py)))+(((-0.0004)*cj12*py*r01))+(((-0.0004)*cj12*pz*r02))+(((0.00713574881384299)*cj10*r01))+(((1.0)*r02*sj12*(pz*pz)))+(((-0.0626)*py*r00))+(((-1.252e-5)*cj12*r01*sj10))+(((1.0)*cj10*r01*(pz*pz)))+(((1.0)*cj10*cj12*r01*(pz*pz))))))))),-1);
if(!x233.valid){
continue;
}
CheckValue<IkReal> x234 = IKatan2WithCheck(IkReal(((((((((-0.00119024349634236)*r01*sj10))+(((-0.000535796698542844)*cj10*r00*sj12))+(((-0.0380269487649317)*cj12*pz*r02))+(((3.31036210769511e-5)*r02))+(((-0.00119024349634236)*cj10*r00))+(((3.42362107695108e-6)*r00*sj10*sj12))+(((-0.0171181053847554)*px*r00*sj12))+(((-0.0722269487649317)*cj10*py*r02*sj12))+(((-0.0380269487649317)*cj12*px*r00))+(((-0.0380269487649317)*px*r00))+(((-0.0722269487649317)*pz*r00*sj10*sj12))+(((0.165518105384755)*cj10*cj12*py*r02))+(((-7.60538975298634e-6)*cj10*r01))+(((0.165518105384755)*cj10*py*r02))+(((0.0722269487649317)*px*r02*sj10*sj12))+(((-7.60538975298634e-6)*cj10*cj12*r01))+(((-0.00119024349634236)*cj12*r01*sj10))+(((7.60538975298634e-6)*cj12*r00*sj10))+(((-0.000535796698542844)*r01*sj10*sj12))+(((-0.0380269487649317)*py*r01))+(((-0.165518105384755)*cj10*cj12*pz*r01))+(((0.165518105384755)*cj12*pz*r00*sj10))+(((-0.0380269487649317)*pz*r02))+(((-0.0171181053847554)*pz*r02*sj12))+(((0.165518105384755)*pz*r00*sj10))+(((7.60538975298634e-6)*r00*sj10))+(((-1.44453897529863e-5)*r02*sj12))+(((-0.165518105384755)*cj12*px*r02*sj10))+(((-0.165518105384755)*px*r02*sj10))+(((-0.0171181053847554)*py*r01*sj12))+(((-3.42362107695108e-6)*cj10*r01*sj12))+(((3.31036210769511e-5)*cj12*r02))+(((-0.00119024349634236)*cj10*cj12*r00))+(((0.0722269487649317)*cj10*pz*r01*sj12))+(((-0.165518105384755)*cj10*pz*r01))+(((-0.0380269487649317)*cj12*py*r01))))*(((((2.0)*cj10*cj12*px*py*r00))+(((-0.0626)*cj12*px*r01))+(((0.0004)*pz*r02))+(((-0.0626)*cj10*pz*r00*sj12))+(((0.00713574881384299)*cj12*r00*sj10))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((-1.0)*cj10*r01*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((0.00617839159348852)*cj10*r01*sj12))+(((-0.00617839159348852)*r00*sj10*sj12))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*r00))+(((1.252e-5)*cj10*cj12*r00))+((r00*sj10*(pz*pz)))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+(((0.0626)*py*r02*sj10*sj12))+(((2.0)*cj10*py*pz*r02))+(((1.252e-5)*cj12*r01*sj10))+(((-2.0)*px*py*r01*sj10))+(((0.00766190588675525)*r02))+((r00*sj10*(py*py)))+((cj10*cj12*r01*(py*py)))+(((-0.00713574881384299)*cj10*cj12*r01))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.0004)*cj12*pz*r02))+(((0.00766190588675525)*cj12*r02))+((r02*sj12*(py*py)))+(((-0.00713574881384299)*cj10*r01))+((r02*sj12*(px*px)))+(((-1.0)*r00*sj10*(px*px)))+(((0.0004)*px*r00))+((cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((0.00713574881384299)*r00*sj10))+(((-1.0)*cj10*r01*(pz*pz)))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((1.252e-5)*r01*sj10))+(((-0.00693458286560622)*r02*sj12))+(((-2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*px*r00))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((2.0)*cj10*px*py*r00))+(((0.0004)*cj12*py*r01))+((cj12*r00*sj10*(pz*pz)))))))+(((((((-0.0660821746152446)*px*r00))+(((-0.00206837206545716)*r01*sj10))+(((0.187572931235068)*py*r01*sj12))+(((-1.32164349230489e-5)*cj10*cj12*r01))+(((-0.00206837206545716)*cj10*cj12*r00))+(((1.32164349230489e-5)*cj12*r00*sj10))+(((0.00587103274765764)*r01*sj10*sj12))+(((3.75145862470137e-5)*cj10*r01*sj12))+(((-0.0660821746152446)*cj12*py*r01))+(((-0.0660821746152446)*pz*r02))+(((-0.0660821746152446)*cj12*pz*r02))+(((0.187572931235068)*px*r00*sj12))+(((0.153372931235068)*cj12*px*r02*sj10))+(((1.64635650769511e-5)*r02*sj12))+(((-1.32164349230489e-5)*cj10*r01))+(((0.0823178253847554)*pz*r00*sj10*sj12))+(((0.187572931235068)*pz*r02*sj12))+(((0.00587103274765764)*cj10*r00*sj12))+(((0.153372931235068)*cj10*cj12*pz*r01))+(((0.0823178253847554)*cj10*py*r02*sj12))+(((-0.153372931235068)*pz*r00*sj10))+(((-0.0823178253847554)*px*r02*sj10*sj12))+(((-0.153372931235068)*cj12*pz*r00*sj10))+(((1.32164349230489e-5)*r00*sj10))+(((-0.0660821746152446)*cj12*px*r00))+(((-0.00206837206545716)*cj10*r00))+(((0.153372931235068)*px*r02*sj10))+(((-3.06745862470137e-5)*cj12*r02))+(((-0.00206837206545716)*cj12*r01*sj10))+(((-3.06745862470137e-5)*r02))+(((-3.75145862470137e-5)*r00*sj10*sj12))+(((0.153372931235068)*cj10*pz*r01))+(((-0.153372931235068)*cj10*py*r02))+(((-0.0660821746152446)*py*r01))+(((-0.153372931235068)*cj10*cj12*py*r02))+(((-0.0823178253847554)*cj10*pz*r01*sj12))))*(((((-1.0)*r00*sj10*sj12*(pz*pz)))+(((0.0626)*cj12*py*r02*sj10))+(((-2.0)*cj10*px*py*r00*sj12))+(((-2.0)*cj12*py*pz*r01))+((cj10*r01*sj12*(px*px)))+(((-0.0626)*cj10*pz*r00))+(((0.0626)*py*r02*sj10))+(((-0.0004)*px*r00*sj12))+(((-0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r00*sj10*sj12*(py*py)))+(((-0.00468898056323635)*cj10*cj12*r01))+(((2.0)*px*pz*r02*sj10*sj12))+((cj10*r01*sj12*(pz*pz)))+(((0.00468898056323635)*r00*sj10))+(((-0.0004)*px*r02*sj10))+((cj12*r02*(px*px)))+(((-2.0)*cj12*px*pz*r00))+((cj12*r02*(py*py)))+(((2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*cj10*cj12*pz*r00))+((r02*(py*py)))+(((-0.00468898056323635)*cj10*r01))+((r02*(px*px)))+(((-0.0004)*cj10*cj12*pz*r01))+(((-0.0626)*py*r00*sj12))+(((0.0626)*cj10*px*r02))+(((0.00357757390438578)*cj10*r01*sj12))+((r00*sj10*sj12*(px*px)))+(((-0.0004)*py*r01*sj12))+(((0.0004)*cj10*cj12*py*r02))+(((-0.0004)*pz*r02*sj12))+(((0.0004)*cj10*py*r02))+(((0.0004)*cj12*pz*r00*sj10))+(((-1.0)*cj12*r02*(pz*pz)))+(((0.00665481076785099)*r02))+(((0.0004)*pz*r00*sj10))+(((-1.252e-5)*r01*sj10*sj12))+(((-1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r00))+(((0.00468898056323635)*cj12*r00*sj10))+(((-0.0626)*pz*r01*sj10))+(((0.0626)*cj10*cj12*px*r02))+(((0.0626)*px*r01*sj12))+(((-1.0)*cj10*r01*sj12*(py*py)))+(((-2.0)*cj10*py*pz*r02*sj12))+(((-2.0)*py*pz*r01))+(((0.00665481076785099)*cj12*r02))+(((-0.0004)*cj10*pz*r01))+(((-0.00321249173548012)*r02*sj12))+(((-0.0004)*cj12*px*r02*sj10))+(((-1.0)*r02*(pz*pz)))+(((-0.00357757390438578)*r00*sj10*sj12)))))))),IkReal(((((((((-0.187572931235068)*pz*r02*sj12))+(((3.06745862470137e-5)*cj12*r02))+(((0.00206837206545716)*cj10*r00))+(((0.00206837206545716)*cj10*cj12*r00))+(((-0.0823178253847554)*pz*r00*sj10*sj12))+(((1.32164349230489e-5)*cj10*cj12*r01))+(((0.0823178253847554)*px*r02*sj10*sj12))+(((0.0660821746152446)*cj12*pz*r02))+(((-0.153372931235068)*px*r02*sj10))+(((-1.64635650769511e-5)*r02*sj12))+(((0.153372931235068)*pz*r00*sj10))+(((0.00206837206545716)*r01*sj10))+(((0.153372931235068)*cj10*cj12*py*r02))+(((-0.00587103274765764)*cj10*r00*sj12))+(((-0.153372931235068)*cj12*px*r02*sj10))+(((0.00206837206545716)*cj12*r01*sj10))+(((0.0660821746152446)*cj12*py*r01))+(((-0.153372931235068)*cj10*pz*r01))+(((0.0660821746152446)*py*r01))+(((0.153372931235068)*cj12*pz*r00*sj10))+(((3.06745862470137e-5)*r02))+(((0.0660821746152446)*pz*r02))+(((0.0660821746152446)*px*r00))+(((-0.187572931235068)*py*r01*sj12))+(((0.0823178253847554)*cj10*pz*r01*sj12))+(((-0.00587103274765764)*r01*sj10*sj12))+(((-0.187572931235068)*px*r00*sj12))+(((-0.0823178253847554)*cj10*py*r02*sj12))+(((-0.153372931235068)*cj10*cj12*pz*r01))+(((-1.32164349230489e-5)*cj12*r00*sj10))+(((-1.32164349230489e-5)*r00*sj10))+(((0.0660821746152446)*cj12*px*r00))+(((-3.75145862470137e-5)*cj10*r01*sj12))+(((1.32164349230489e-5)*cj10*r01))+(((3.75145862470137e-5)*r00*sj10*sj12))+(((0.153372931235068)*cj10*py*r02))))*(((((0.00321249173548012)*cj10*r01*sj12))+(((-0.00665473076785099)*cj10*r01))+(((2.0)*cj10*cj12*px*py*r00))+(((-0.00468898056323635)*r02))+(((-0.0626)*cj12*px*r01))+(((0.0004)*pz*r02))+(((-0.0626)*cj10*pz*r00*sj12))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((0.00357765390438578)*r02*sj12))+(((-1.0)*cj10*r01*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((0.00665473076785099)*cj12*r00*sj10))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*r00))+(((1.252e-5)*cj10*cj12*r00))+(((-0.00468898056323635)*cj12*r02))+((r00*sj10*(pz*pz)))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+(((0.0626)*py*r02*sj10*sj12))+(((2.0)*cj10*py*pz*r02))+(((1.252e-5)*cj12*r01*sj10))+(((-2.0)*px*py*r01*sj10))+(((-0.00665473076785099)*cj10*cj12*r01))+((r00*sj10*(py*py)))+((cj10*cj12*r01*(py*py)))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.0004)*cj12*pz*r02))+(((-0.00321249173548012)*r00*sj10*sj12))+((r02*sj12*(py*py)))+((r02*sj12*(px*px)))+(((-1.0)*r00*sj10*(px*px)))+(((0.0004)*px*r00))+((cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((-1.0)*cj10*r01*(pz*pz)))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((1.252e-5)*r01*sj10))+(((-2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*px*r00))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((2.0)*cj10*px*py*r00))+(((0.00665473076785099)*r00*sj10))+(((0.0004)*cj12*py*r01))+((cj12*r00*sj10*(pz*pz)))))))+(((((((0.0380269487649317)*cj12*pz*r02))+(((-3.42362107695108e-6)*r00*sj10*sj12))+(((0.165518105384755)*cj10*cj12*pz*r01))+(((-0.165518105384755)*cj10*py*r02))+(((0.00119024349634236)*cj10*r00))+(((0.165518105384755)*cj12*px*r02*sj10))+(((-0.0722269487649317)*px*r02*sj10*sj12))+(((-3.31036210769511e-5)*r02))+(((3.42362107695108e-6)*cj10*r01*sj12))+(((0.0722269487649317)*pz*r00*sj10*sj12))+(((-7.60538975298634e-6)*cj12*r00*sj10))+(((0.0380269487649317)*px*r00))+(((0.165518105384755)*cj10*pz*r01))+(((-0.165518105384755)*cj10*cj12*py*r02))+(((0.00119024349634236)*cj12*r01*sj10))+(((0.000535796698542844)*r01*sj10*sj12))+(((0.0171181053847554)*pz*r02*sj12))+(((7.60538975298634e-6)*cj10*cj12*r01))+(((-0.0722269487649317)*cj10*pz*r01*sj12))+(((-3.31036210769511e-5)*cj12*r02))+(((-0.165518105384755)*pz*r00*sj10))+(((-0.165518105384755)*cj12*pz*r00*sj10))+(((7.60538975298634e-6)*cj10*r01))+(((1.44453897529863e-5)*r02*sj12))+(((0.000535796698542844)*cj10*r00*sj12))+(((0.0722269487649317)*cj10*py*r02*sj12))+(((-7.60538975298634e-6)*r00*sj10))+(((0.00119024349634236)*cj10*cj12*r00))+(((0.0171181053847554)*px*r00*sj12))+(((0.0380269487649317)*py*r01))+(((0.0380269487649317)*cj12*px*r00))+(((0.0380269487649317)*pz*r02))+(((0.00119024349634236)*r01*sj10))+(((0.165518105384755)*px*r02*sj10))+(((0.0380269487649317)*cj12*py*r01))+(((0.0171181053847554)*py*r01*sj12))))*((((r00*sj10*sj12*(pz*pz)))+(((0.0004)*px*r00*sj12))+(((-1.0)*cj12*r02*(px*px)))+(((0.0626)*cj10*pz*r00))+(((-1.0)*cj10*r01*sj12*(px*px)))+(((0.00766190588675525)*cj12*r00*sj10))+(((1.252e-5)*r01*sj10*sj12))+(((0.00617839159348852)*r02*sj12))+(((2.0)*cj10*py*pz*r02*sj12))+((cj10*r01*sj12*(py*py)))+(((2.0)*px*pz*r00))+(((-2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*py*r02*sj10))+(((2.0)*cj10*px*py*r00*sj12))+(((0.0626)*cj10*cj12*pz*r00))+((r00*sj10*sj12*(py*py)))+(((-0.0004)*cj12*pz*r00*sj10))+(((-0.00713582881384299)*r02))+(((-0.0004)*cj10*cj12*py*r02))+(((0.0004)*py*r01*sj12))+(((-0.00766190588675525)*cj10*r01))+(((-1.0)*cj12*r02*(py*py)))+(((2.0)*cj12*px*pz*r00))+(((-0.0626)*cj12*py*r02*sj10))+((cj12*r02*(pz*pz)))+(((-0.0626)*cj10*cj12*px*r02))+(((-0.0626)*cj10*px*r02))+(((0.00766190588675525)*r00*sj10))+(((0.0004)*px*r02*sj10))+(((-0.00766190588675525)*cj10*cj12*r01))+(((0.0004)*pz*r02*sj12))+(((0.0626)*py*r00*sj12))+(((0.0004)*cj10*cj12*pz*r01))+(((0.0004)*cj12*px*r02*sj10))+(((-0.0004)*cj10*py*r02))+(((-0.0626)*px*r01*sj12))+(((1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r02*sj10*sj12))+(((-0.0004)*pz*r00*sj10))+(((2.0)*cj12*py*pz*r01))+(((-1.0)*cj10*r01*sj12*(pz*pz)))+(((0.0004)*cj10*pz*r01))+(((0.00693466286560622)*cj10*r01*sj12))+(((0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r02*(px*px)))+(((-0.00713582881384299)*cj12*r02))+(((2.0)*py*pz*r01))+(((-1.0)*r00*sj10*sj12*(px*px)))+(((-1.0)*r02*(py*py)))+(((0.0626)*pz*r01*sj10))+(((-0.00693466286560622)*r00*sj10*sj12))+((r02*(pz*pz))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x234.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x233.value)))+(x234.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
evalcond[0]=((((((((0.00321249173548012)*cj10*r01*sj12))+(((-0.00665473076785099)*cj10*r01))+(((2.0)*cj10*cj12*px*py*r00))+(((-0.00468898056323635)*r02))+(((-0.0626)*cj12*px*r01))+(((0.0004)*pz*r02))+(((-0.0626)*cj10*pz*r00*sj12))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((0.00357765390438578)*r02*sj12))+(((-1.0)*cj10*r01*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((0.00665473076785099)*cj12*r00*sj10))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*r00))+(((1.252e-5)*cj10*cj12*r00))+(((-0.00468898056323635)*cj12*r02))+((r00*sj10*(pz*pz)))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+(((0.0626)*py*r02*sj10*sj12))+(((2.0)*cj10*py*pz*r02))+(((1.252e-5)*cj12*r01*sj10))+(((-2.0)*px*py*r01*sj10))+(((-0.00665473076785099)*cj10*cj12*r01))+((r00*sj10*(py*py)))+((cj10*cj12*r01*(py*py)))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.0004)*cj12*pz*r02))+(((-0.00321249173548012)*r00*sj10*sj12))+((r02*sj12*(py*py)))+((r02*sj12*(px*px)))+(((-1.0)*r00*sj10*(px*px)))+(((0.0004)*px*r00))+((cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((-1.0)*cj10*r01*(pz*pz)))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((1.252e-5)*r01*sj10))+(((-2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*px*r00))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((2.0)*cj10*px*py*r00))+(((0.00665473076785099)*r00*sj10))+(((0.0004)*cj12*py*r01))+((cj12*r00*sj10*(pz*pz)))))*(IKsin(j11))))+(((-0.00119024349634236)*r01*sj10))+(((-0.000535796698542844)*cj10*r00*sj12))+(((-0.0380269487649317)*cj12*pz*r02))+(((3.31036210769511e-5)*r02))+(((-0.00119024349634236)*cj10*r00))+(((3.42362107695108e-6)*r00*sj10*sj12))+(((-0.0171181053847554)*px*r00*sj12))+(((-0.0722269487649317)*cj10*py*r02*sj12))+(((-0.0380269487649317)*cj12*px*r00))+(((-0.0380269487649317)*px*r00))+(((-0.0722269487649317)*pz*r00*sj10*sj12))+(((0.165518105384755)*cj10*cj12*py*r02))+(((-7.60538975298634e-6)*cj10*r01))+(((((((-1.0)*r00*sj10*sj12*(pz*pz)))+(((0.0626)*cj12*py*r02*sj10))+(((-2.0)*cj10*px*py*r00*sj12))+(((-2.0)*cj12*py*pz*r01))+((cj10*r01*sj12*(px*px)))+(((-0.0626)*cj10*pz*r00))+(((0.0626)*py*r02*sj10))+(((-0.0004)*px*r00*sj12))+(((-0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r00*sj10*sj12*(py*py)))+(((-0.00468898056323635)*cj10*cj12*r01))+(((2.0)*px*pz*r02*sj10*sj12))+((cj10*r01*sj12*(pz*pz)))+(((0.00468898056323635)*r00*sj10))+(((-0.0004)*px*r02*sj10))+((cj12*r02*(px*px)))+(((-2.0)*cj12*px*pz*r00))+((cj12*r02*(py*py)))+(((2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*cj10*cj12*pz*r00))+((r02*(py*py)))+(((-0.00468898056323635)*cj10*r01))+((r02*(px*px)))+(((-0.0004)*cj10*cj12*pz*r01))+(((-0.0626)*py*r00*sj12))+(((0.0626)*cj10*px*r02))+(((0.00357757390438578)*cj10*r01*sj12))+((r00*sj10*sj12*(px*px)))+(((-0.0004)*py*r01*sj12))+(((0.0004)*cj10*cj12*py*r02))+(((-0.0004)*pz*r02*sj12))+(((0.0004)*cj10*py*r02))+(((0.0004)*cj12*pz*r00*sj10))+(((-1.0)*cj12*r02*(pz*pz)))+(((0.00665481076785099)*r02))+(((0.0004)*pz*r00*sj10))+(((-1.252e-5)*r01*sj10*sj12))+(((-1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r00))+(((0.00468898056323635)*cj12*r00*sj10))+(((-0.0626)*pz*r01*sj10))+(((0.0626)*cj10*cj12*px*r02))+(((0.0626)*px*r01*sj12))+(((-1.0)*cj10*r01*sj12*(py*py)))+(((-2.0)*cj10*py*pz*r02*sj12))+(((-2.0)*py*pz*r01))+(((0.00665481076785099)*cj12*r02))+(((-0.0004)*cj10*pz*r01))+(((-0.00321249173548012)*r02*sj12))+(((-0.0004)*cj12*px*r02*sj10))+(((-1.0)*r02*(pz*pz)))+(((-0.00357757390438578)*r00*sj10*sj12))))*(IKcos(j11))))+(((0.165518105384755)*cj10*py*r02))+(((0.0722269487649317)*px*r02*sj10*sj12))+(((-7.60538975298634e-6)*cj10*cj12*r01))+(((-0.00119024349634236)*cj12*r01*sj10))+(((7.60538975298634e-6)*cj12*r00*sj10))+(((-0.000535796698542844)*r01*sj10*sj12))+(((-0.0380269487649317)*py*r01))+(((-0.165518105384755)*cj10*cj12*pz*r01))+(((0.165518105384755)*cj12*pz*r00*sj10))+(((-0.0380269487649317)*pz*r02))+(((-0.0171181053847554)*pz*r02*sj12))+(((0.165518105384755)*pz*r00*sj10))+(((7.60538975298634e-6)*r00*sj10))+(((-1.44453897529863e-5)*r02*sj12))+(((-0.165518105384755)*cj12*px*r02*sj10))+(((-0.165518105384755)*px*r02*sj10))+(((-0.0171181053847554)*py*r01*sj12))+(((-3.42362107695108e-6)*cj10*r01*sj12))+(((3.31036210769511e-5)*cj12*r02))+(((-0.00119024349634236)*cj10*cj12*r00))+(((0.0722269487649317)*cj10*pz*r01*sj12))+(((-0.165518105384755)*cj10*pz*r01))+(((-0.0380269487649317)*cj12*py*r01)));
evalcond[1]=((((-0.0171181053847554)*pz*r02))+(((0.000535796698542844)*cj12*r01*sj10))+(((-0.165518105384755)*cj10*pz*r01*sj12))+(((-0.0722269487649317)*cj10*cj12*pz*r01))+(((-0.00119024349634236)*r01*sj10*sj12))+(((-0.0171181053847554)*px*r00))+(((-7.60538975298634e-6)*cj10*r01*sj12))+(((0.000535796698542844)*cj10*cj12*r00))+(((1.44453897529863e-5)*cj12*r02))+(((-3.42362107695108e-6)*cj10*r01))+(((((((-0.00357757390438578)*r00*sj10))+(((2.0)*cj10*cj12*px*py*r00))+(((0.00665481076785099)*r02*sj12))+((cj10*r01*(px*px)))+(((-0.0626)*cj12*px*r01))+(((-0.0626)*cj10*pz*r00*sj12))+(((-1.0)*r00*sj10*(py*py)))+(((0.00357757390438578)*cj12*r00*sj10))+(((2.0)*px*py*r01*sj10))+(((-1.252e-5)*r01*sj10))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((-0.00321249173548012)*r02))+(((-2.0)*cj10*py*pz*r02))+(((0.0626)*px*r01))+(((-0.0004)*py*r01))+((r00*sj10*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((-0.0004)*px*r00))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*cj12*r00))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+((cj10*r01*(pz*pz)))+(((0.0626)*py*r02*sj10*sj12))+(((1.252e-5)*cj12*r01*sj10))+(((-0.0004)*pz*r02))+((cj10*cj12*r01*(py*py)))+(((-1.0)*r00*sj10*(pz*pz)))+(((-1.0)*cj10*r01*(py*py)))+(((-1.252e-5)*cj10*r00))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-2.0)*cj10*px*py*r00))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.00321249173548012)*cj12*r02))+(((2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*pz*r02))+((r02*sj12*(py*py)))+((r02*sj12*(px*px)))+((cj12*r00*sj10*(py*py)))+(((-0.00357757390438578)*cj10*cj12*r01))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((0.0004)*cj12*px*r00))+(((0.00468898056323635)*r00*sj10*sj12))+(((-0.0626)*py*r00))+(((0.0004)*cj12*py*r01))+(((-0.00468898056323635)*cj10*r01*sj12))+((cj12*r00*sj10*(pz*pz)))+(((0.00357757390438578)*cj10*r01))))*(IKcos(j11))))+(((3.42362107695108e-6)*cj10*cj12*r01))+(((-0.0380269487649317)*pz*r02*sj12))+(((-0.0722269487649317)*cj12*px*r02*sj10))+(((-0.0722269487649317)*pz*r00*sj10))+(((0.165518105384755)*cj10*py*r02*sj12))+(((0.0722269487649317)*cj10*pz*r01))+(((-0.00119024349634236)*cj10*r00*sj12))+(((0.0722269487649317)*cj12*pz*r00*sj10))+(((3.42362107695108e-6)*r00*sj10))+(((-0.165518105384755)*px*r02*sj10*sj12))+(((-1.44453897529863e-5)*r02))+(((-3.42362107695108e-6)*cj12*r00*sj10))+(((0.0722269487649317)*cj10*cj12*py*r02))+(((0.0171181053847554)*cj12*px*r00))+(((0.0171181053847554)*cj12*pz*r02))+(((-0.000535796698542844)*cj10*r00))+(((-0.0722269487649317)*cj10*py*r02))+(((0.0722269487649317)*px*r02*sj10))+(((-0.0171181053847554)*py*r01))+(((0.0171181053847554)*cj12*py*r01))+((((((r00*sj10*sj12*(pz*pz)))+(((0.0004)*px*r00*sj12))+(((-1.0)*cj12*r02*(px*px)))+(((-1.0)*cj10*r01*sj12*(px*px)))+(((-0.0626)*cj10*pz*r00))+(((-0.00357765390438578)*cj12*r02))+(((0.0626)*py*r02*sj10))+(((1.252e-5)*r01*sj10*sj12))+(((0.00321249173548012)*cj12*r00*sj10))+(((2.0)*cj10*py*pz*r02*sj12))+((cj10*r01*sj12*(py*py)))+(((-0.00665473076785099)*cj10*r01*sj12))+(((-0.0004)*px*r02*sj10))+(((-2.0)*px*py*r01*sj10*sj12))+(((2.0)*cj10*px*py*r00*sj12))+(((0.0626)*cj10*cj12*pz*r00))+((r00*sj10*sj12*(py*py)))+((r02*(py*py)))+(((-0.0004)*cj12*pz*r00*sj10))+(((-0.0004)*cj10*cj12*py*r02))+(((0.0004)*py*r01*sj12))+(((-1.0)*cj12*r02*(py*py)))+(((2.0)*cj12*px*pz*r00))+((r02*(px*px)))+(((-0.0626)*cj12*py*r02*sj10))+(((0.0626)*cj10*px*r02))+((cj12*r02*(pz*pz)))+(((-0.0626)*cj10*cj12*px*r02))+(((0.0004)*cj10*py*r02))+(((-0.00468898056323635)*r02*sj12))+(((-0.00321249173548012)*r00*sj10))+(((0.0004)*pz*r00*sj10))+(((0.00665473076785099)*r00*sj10*sj12))+(((0.0004)*pz*r02*sj12))+(((0.0626)*py*r00*sj12))+(((0.0004)*cj10*cj12*pz*r01))+(((0.0004)*cj12*px*r02*sj10))+(((-0.0626)*px*r01*sj12))+(((1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r00))+(((-2.0)*px*pz*r02*sj10*sj12))+(((-0.0626)*pz*r01*sj10))+(((2.0)*cj12*py*pz*r01))+(((-1.0)*cj10*r01*sj12*(pz*pz)))+(((-0.00321249173548012)*cj10*cj12*r01))+(((0.0626)*cj12*pz*r01*sj10))+(((0.00357765390438578)*r02))+(((0.00321249173548012)*cj10*r01))+(((-2.0)*py*pz*r01))+(((-1.0)*r00*sj10*sj12*(px*px)))+(((-0.0004)*cj10*pz*r01))+(((-1.0)*r02*(pz*pz)))))*(IKsin(j11))))+(((7.60538975298634e-6)*r00*sj10*sj12))+(((-0.0380269487649317)*px*r00*sj12))+(((-0.000535796698542844)*r01*sj10))+(((-0.0380269487649317)*py*r01*sj12))+(((0.165518105384755)*pz*r00*sj10*sj12))+(((3.31036210769511e-5)*r02*sj12)));
evalcond[2]=((((-0.187572931235068)*pz*r02*sj12))+(((3.06745862470137e-5)*cj12*r02))+(((0.00206837206545716)*cj10*r00))+(((0.00206837206545716)*cj10*cj12*r00))+(((-0.0823178253847554)*pz*r00*sj10*sj12))+(((1.32164349230489e-5)*cj10*cj12*r01))+(((0.0823178253847554)*px*r02*sj10*sj12))+(((0.0660821746152446)*cj12*pz*r02))+(((-0.153372931235068)*px*r02*sj10))+(((-1.64635650769511e-5)*r02*sj12))+(((0.153372931235068)*pz*r00*sj10))+(((0.00206837206545716)*r01*sj10))+(((0.153372931235068)*cj10*cj12*py*r02))+(((-0.00587103274765764)*cj10*r00*sj12))+(((-0.153372931235068)*cj12*px*r02*sj10))+(((0.00206837206545716)*cj12*r01*sj10))+(((0.0660821746152446)*cj12*py*r01))+(((-0.153372931235068)*cj10*pz*r01))+(((0.0660821746152446)*py*r01))+(((0.153372931235068)*cj12*pz*r00*sj10))+(((3.06745862470137e-5)*r02))+(((0.0660821746152446)*pz*r02))+(((0.0660821746152446)*px*r00))+(((((((2.0)*cj10*cj12*px*py*r00))+(((-0.0626)*cj12*px*r01))+(((0.0004)*pz*r02))+(((-0.0626)*cj10*pz*r00*sj12))+(((0.00713574881384299)*cj12*r00*sj10))+(((0.0626)*cj12*py*r00))+(((-2.0)*py*pz*r01*sj12))+(((-0.0626)*pz*r01*sj10*sj12))+(((-2.0)*cj12*px*pz*r02*sj10))+(((-1.0)*cj10*r01*(px*px)))+(((0.0626)*cj10*px*r02*sj12))+(((2.0)*cj10*cj12*py*pz*r02))+(((0.00617839159348852)*cj10*r01*sj12))+(((-0.00617839159348852)*r00*sj10*sj12))+(((0.0004)*cj10*py*r02*sj12))+(((-1.0)*cj12*r00*sj10*(px*px)))+(((0.0004)*pz*r00*sj10*sj12))+(((1.252e-5)*cj10*r00))+(((1.252e-5)*cj10*cj12*r00))+((r00*sj10*(pz*pz)))+(((-2.0)*px*pz*r00*sj12))+(((-1.0)*cj10*cj12*r01*(px*px)))+(((0.0626)*py*r02*sj10*sj12))+(((2.0)*cj10*py*pz*r02))+(((1.252e-5)*cj12*r01*sj10))+(((-2.0)*px*py*r01*sj10))+(((0.00766190588675525)*r02))+((r00*sj10*(py*py)))+((cj10*cj12*r01*(py*py)))+(((-0.00713574881384299)*cj10*cj12*r01))+(((-2.0)*cj12*px*py*r01*sj10))+(((-0.0004)*px*r02*sj10*sj12))+(((-0.0004)*cj10*pz*r01*sj12))+(((0.0004)*cj12*pz*r02))+(((0.00766190588675525)*cj12*r02))+((r02*sj12*(py*py)))+(((-0.00713574881384299)*cj10*r01))+((r02*sj12*(px*px)))+(((-1.0)*r00*sj10*(px*px)))+(((0.0004)*px*r00))+((cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((0.00713574881384299)*r00*sj10))+(((-1.0)*cj10*r01*(pz*pz)))+(((-1.0)*cj10*cj12*r01*(pz*pz)))+(((-1.0)*r02*sj12*(pz*pz)))+(((1.252e-5)*r01*sj10))+(((-0.00693458286560622)*r02*sj12))+(((-2.0)*px*pz*r02*sj10))+(((0.0004)*cj12*px*r00))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((2.0)*cj10*px*py*r00))+(((0.0004)*cj12*py*r01))+((cj12*r00*sj10*(pz*pz)))))*(IKcos(j11))))+(((-0.187572931235068)*py*r01*sj12))+(((0.0823178253847554)*cj10*pz*r01*sj12))+(((-0.00587103274765764)*r01*sj10*sj12))+(((-0.187572931235068)*px*r00*sj12))+(((-0.0823178253847554)*cj10*py*r02*sj12))+(((-0.153372931235068)*cj10*cj12*pz*r01))+((((((r00*sj10*sj12*(pz*pz)))+(((0.0004)*px*r00*sj12))+(((-1.0)*cj12*r02*(px*px)))+(((0.0626)*cj10*pz*r00))+(((-1.0)*cj10*r01*sj12*(px*px)))+(((0.00766190588675525)*cj12*r00*sj10))+(((1.252e-5)*r01*sj10*sj12))+(((0.00617839159348852)*r02*sj12))+(((2.0)*cj10*py*pz*r02*sj12))+((cj10*r01*sj12*(py*py)))+(((2.0)*px*pz*r00))+(((-2.0)*px*py*r01*sj10*sj12))+(((-0.0626)*py*r02*sj10))+(((2.0)*cj10*px*py*r00*sj12))+(((0.0626)*cj10*cj12*pz*r00))+((r00*sj10*sj12*(py*py)))+(((-0.0004)*cj12*pz*r00*sj10))+(((-0.00713582881384299)*r02))+(((-0.0004)*cj10*cj12*py*r02))+(((0.0004)*py*r01*sj12))+(((-0.00766190588675525)*cj10*r01))+(((-1.0)*cj12*r02*(py*py)))+(((2.0)*cj12*px*pz*r00))+(((-0.0626)*cj12*py*r02*sj10))+((cj12*r02*(pz*pz)))+(((-0.0626)*cj10*cj12*px*r02))+(((-0.0626)*cj10*px*r02))+(((0.00766190588675525)*r00*sj10))+(((0.0004)*px*r02*sj10))+(((-0.00766190588675525)*cj10*cj12*r01))+(((0.0004)*pz*r02*sj12))+(((0.0626)*py*r00*sj12))+(((0.0004)*cj10*cj12*pz*r01))+(((0.0004)*cj12*px*r02*sj10))+(((-0.0004)*cj10*py*r02))+(((-0.0626)*px*r01*sj12))+(((1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r02*sj10*sj12))+(((-0.0004)*pz*r00*sj10))+(((2.0)*cj12*py*pz*r01))+(((-1.0)*cj10*r01*sj12*(pz*pz)))+(((0.0004)*cj10*pz*r01))+(((0.00693466286560622)*cj10*r01*sj12))+(((0.0626)*cj12*pz*r01*sj10))+(((-1.0)*r02*(px*px)))+(((-0.00713582881384299)*cj12*r02))+(((2.0)*py*pz*r01))+(((-1.0)*r00*sj10*sj12*(px*px)))+(((-1.0)*r02*(py*py)))+(((0.0626)*pz*r01*sj10))+(((-0.00693466286560622)*r00*sj10*sj12))+((r02*(pz*pz)))))*(IKsin(j11))))+(((-1.32164349230489e-5)*cj12*r00*sj10))+(((-1.32164349230489e-5)*r00*sj10))+(((0.0660821746152446)*cj12*px*r00))+(((-3.75145862470137e-5)*cj10*r01*sj12))+(((1.32164349230489e-5)*cj10*r01))+(((3.75145862470137e-5)*r00*sj10*sj12))+(((0.153372931235068)*cj10*py*r02)));
evalcond[3]=((((-0.0823178253847554)*cj10*py*r02))+(((0.0823178253847554)*px*r02*sj10))+(((0.187572931235068)*cj12*py*r01))+(((-1.64635650769511e-5)*r02))+(((0.0823178253847554)*cj12*pz*r00*sj10))+(((-0.187572931235068)*py*r01))+(((-0.187572931235068)*pz*r02))+(((-1.32164349230489e-5)*r00*sj10*sj12))+(((((((-2.0)*cj10*cj12*py*pz*r02))+(((-1.0)*r02*sj12*(py*py)))+((r02*sj12*(pz*pz)))+(((2.0)*cj12*px*py*r01*sj10))+(((0.0004)*pz*r02))+(((0.0004)*cj10*pz*r01*sj12))+(((2.0)*cj12*px*pz*r02*sj10))+(((-1.252e-5)*cj10*cj12*r00))+(((-1.0)*r02*sj12*(px*px)))+(((-0.0004)*pz*r00*sj10*sj12))+(((0.0626)*cj10*pz*r00*sj12))+(((0.0626)*pz*r01*sj10*sj12))+(((-1.0)*cj10*r01*(px*px)))+(((-0.00766190588675525)*cj10*r01*sj12))+(((-0.00693466286560622)*cj10*cj12*r01))+(((-0.00693466286560622)*r00*sj10))+((cj10*cj12*r01*(px*px)))+(((-0.0626)*cj12*py*r00))+(((-1.0)*cj12*r00*sj10*(pz*pz)))+(((-0.00617839159348852)*cj12*r02))+(((-0.00713582881384299)*r02*sj12))+(((1.252e-5)*cj10*r00))+(((-0.0626)*cj10*px*r02*sj12))+((r00*sj10*(pz*pz)))+(((-0.0004)*cj10*py*r02*sj12))+(((2.0)*cj10*py*pz*r02))+(((-1.0)*cj10*cj12*r01*(py*py)))+(((0.00617839159348852)*r02))+(((-2.0)*px*py*r01*sj10))+(((-0.0626)*py*r02*sj10*sj12))+((r00*sj10*(py*py)))+(((0.0004)*px*r02*sj10*sj12))+(((2.0)*py*pz*r01*sj12))+(((-2.0)*cj10*cj12*px*py*r00))+(((-1.0)*r00*sj10*(px*px)))+(((-0.0004)*cj12*px*r00))+(((0.0626)*cj12*px*r01))+(((0.00766190588675525)*r00*sj10*sj12))+(((0.0004)*px*r00))+(((2.0)*px*pz*r00*sj12))+(((-1.0)*cj12*r00*sj10*(py*py)))+(((-0.0626)*px*r01))+((cj10*r01*(py*py)))+(((-0.0004)*cj12*py*r01))+(((-1.0)*cj10*r01*(pz*pz)))+((cj10*cj12*r01*(pz*pz)))+(((0.00693466286560622)*cj10*r01))+(((1.252e-5)*r01*sj10))+(((-2.0)*px*pz*r02*sj10))+(((0.00693466286560622)*cj12*r00*sj10))+(((0.0004)*py*r01))+(((0.0626)*py*r00))+(((-0.0004)*cj12*pz*r02))+(((2.0)*cj10*px*py*r00))+(((-1.252e-5)*cj12*r01*sj10))+((cj12*r00*sj10*(px*px)))))*(IKsin(j11))))+(((0.153372931235068)*pz*r00*sj10*sj12))+(((-0.0823178253847554)*cj12*px*r02*sj10))+(((0.0823178253847554)*cj10*pz*r01))+(((0.00587103274765764)*cj12*r01*sj10))+(((-0.187572931235068)*px*r00))+(((-0.0823178253847554)*cj10*cj12*pz*r01))+(((3.75145862470137e-5)*r00*sj10))+((((((r00*sj10*sj12*(pz*pz)))+(((0.0004)*px*r00*sj12))+(((-1.0)*cj12*r02*(px*px)))+(((-1.0)*cj10*r01*sj12*(px*px)))+(((-0.0626)*cj10*pz*r00))+(((0.0626)*py*r02*sj10))+(((1.252e-5)*r01*sj10*sj12))+(((2.0)*cj10*py*pz*r02*sj12))+(((-0.00693458286560622)*r02))+((cj10*r01*sj12*(py*py)))+(((-0.0004)*px*r02*sj10))+(((-2.0)*px*py*r01*sj10*sj12))+(((0.00766190588675525)*r02*sj12))+(((2.0)*cj10*px*py*r00*sj12))+(((0.0626)*cj10*cj12*pz*r00))+((r00*sj10*sj12*(py*py)))+(((-0.00617839159348852)*r00*sj10))+((r02*(py*py)))+(((-0.0004)*cj12*pz*r00*sj10))+(((-0.0004)*cj10*cj12*py*r02))+(((0.0004)*py*r01*sj12))+(((-1.0)*cj12*r02*(py*py)))+(((2.0)*cj12*px*pz*r00))+(((-0.00713574881384299)*cj10*r01*sj12))+((r02*(px*px)))+(((-0.0626)*cj12*py*r02*sj10))+(((0.0626)*cj10*px*r02))+((cj12*r02*(pz*pz)))+(((-0.0626)*cj10*cj12*px*r02))+(((0.00617839159348852)*cj10*r01))+(((0.0004)*cj10*py*r02))+(((0.0004)*pz*r00*sj10))+(((0.0004)*pz*r02*sj12))+(((0.0626)*py*r00*sj12))+(((0.0004)*cj10*cj12*pz*r01))+(((0.0004)*cj12*px*r02*sj10))+(((-0.0626)*px*r01*sj12))+(((1.252e-5)*cj10*r00*sj12))+(((-2.0)*px*pz*r00))+(((0.00713574881384299)*r00*sj10*sj12))+(((-2.0)*px*pz*r02*sj10*sj12))+(((-0.00617839159348852)*cj10*cj12*r01))+(((0.00693458286560622)*cj12*r02))+(((-0.0626)*pz*r01*sj10))+(((2.0)*cj12*py*pz*r01))+(((-1.0)*cj10*r01*sj12*(pz*pz)))+(((0.0626)*cj12*pz*r01*sj10))+(((-2.0)*py*pz*r01))+(((-1.0)*r00*sj10*sj12*(px*px)))+(((0.00617839159348852)*cj12*r00*sj10))+(((-0.0004)*cj10*pz*r01))+(((-1.0)*r02*(pz*pz)))))*(IKcos(j11))))+(((-3.75145862470137e-5)*cj10*r01))+(((1.64635650769511e-5)*cj12*r02))+(((0.0660821746152446)*py*r01*sj12))+(((-0.153372931235068)*cj10*pz*r01*sj12))+(((-0.00587103274765764)*r01*sj10))+(((0.187572931235068)*cj12*px*r00))+(((-0.153372931235068)*px*r02*sj10*sj12))+(((3.06745862470137e-5)*r02*sj12))+(((0.00206837206545716)*r01*sj10*sj12))+(((0.00206837206545716)*cj10*r00*sj12))+(((0.0660821746152446)*px*r00*sj12))+(((-3.75145862470137e-5)*cj12*r00*sj10))+(((-0.00587103274765764)*cj10*r00))+(((0.153372931235068)*cj10*py*r02*sj12))+(((-0.0823178253847554)*pz*r00*sj10))+(((1.32164349230489e-5)*cj10*r01*sj12))+(((3.75145862470137e-5)*cj10*cj12*r01))+(((0.0823178253847554)*cj10*cj12*py*r02))+(((0.0660821746152446)*pz*r02*sj12))+(((0.00587103274765764)*cj10*cj12*r00))+(((0.187572931235068)*cj12*pz*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x235=((20.2227832716915)*sj12);
IkReal x236=(pz*sj11);
IkReal x237=(cj11*cj12);
IkReal x238=((5.00197984865329)*sj12);
IkReal x239=(cj11*pz);
IkReal x240=(cj10*py);
IkReal x241=((0.0040445566543383)*sj11);
IkReal x242=(px*sj10);
IkReal x243=((5.00197984865329)*cj12);
IkReal x244=((0.00100039596973066)*sj12);
IkReal x245=((20.2227832716915)*cj12);
IkReal x246=(cj11*x242);
IkReal x247=(sj11*x245);
if( IKabs(((1.58606437417148)+(((0.138523794241362)*cj12))+(((0.00100039596973066)*cj12*sj11))+(((-1.0)*sj11*x242*x243))+(((-1.0)*x235*x239))+(((-1.24460590083048)*sj12))+((x238*x246))+((x236*x245))+(((-5.00197984865329)*pz*x237))+((sj11*x240*x243))+((sj12*x241))+(((-20.2227832716915)*x237*x242))+(((-1.0)*cj11*x244))+(((-1.0)*cj11*x238*x240))+(((-1.0)*sj11*x235*x242))+(((-1.0)*x236*x238))+((sj11*x235*x240))+(((20.2227832716915)*x237*x240))+(((0.0040445566543383)*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0253373108241496)+(((20.2227832716915)*pz*x237))+(((0.00100039596973066)*x237))+(((5.00197984865329)*x237*x240))+(((-5.00197984865329)*x237*x242))+(((-1.0)*sj11*x238*x242))+((sj11*x244))+((x236*x243))+(((0.0040445566543383)*cj11*sj12))+(((-1.0)*x238*x239))+(((0.138523794241362)*sj12))+((x235*x236))+(((1.24460590083048)*cj12))+(((-1.0)*x235*x246))+(((-1.0)*cj12*x241))+((x242*x247))+(((-1.0)*x240*x247))+((cj11*x235*x240))+((sj11*x238*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.58606437417148)+(((0.138523794241362)*cj12))+(((0.00100039596973066)*cj12*sj11))+(((-1.0)*sj11*x242*x243))+(((-1.0)*x235*x239))+(((-1.24460590083048)*sj12))+((x238*x246))+((x236*x245))+(((-5.00197984865329)*pz*x237))+((sj11*x240*x243))+((sj12*x241))+(((-20.2227832716915)*x237*x242))+(((-1.0)*cj11*x244))+(((-1.0)*cj11*x238*x240))+(((-1.0)*sj11*x235*x242))+(((-1.0)*x236*x238))+((sj11*x235*x240))+(((20.2227832716915)*x237*x240))+(((0.0040445566543383)*x237))))+IKsqr(((0.0253373108241496)+(((20.2227832716915)*pz*x237))+(((0.00100039596973066)*x237))+(((5.00197984865329)*x237*x240))+(((-5.00197984865329)*x237*x242))+(((-1.0)*sj11*x238*x242))+((sj11*x244))+((x236*x243))+(((0.0040445566543383)*cj11*sj12))+(((-1.0)*x238*x239))+(((0.138523794241362)*sj12))+((x235*x236))+(((1.24460590083048)*cj12))+(((-1.0)*x235*x246))+(((-1.0)*cj12*x241))+((x242*x247))+(((-1.0)*x240*x247))+((cj11*x235*x240))+((sj11*x238*x240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((1.58606437417148)+(((0.138523794241362)*cj12))+(((0.00100039596973066)*cj12*sj11))+(((-1.0)*sj11*x242*x243))+(((-1.0)*x235*x239))+(((-1.24460590083048)*sj12))+((x238*x246))+((x236*x245))+(((-5.00197984865329)*pz*x237))+((sj11*x240*x243))+((sj12*x241))+(((-20.2227832716915)*x237*x242))+(((-1.0)*cj11*x244))+(((-1.0)*cj11*x238*x240))+(((-1.0)*sj11*x235*x242))+(((-1.0)*x236*x238))+((sj11*x235*x240))+(((20.2227832716915)*x237*x240))+(((0.0040445566543383)*x237))), ((0.0253373108241496)+(((20.2227832716915)*pz*x237))+(((0.00100039596973066)*x237))+(((5.00197984865329)*x237*x240))+(((-5.00197984865329)*x237*x242))+(((-1.0)*sj11*x238*x242))+((sj11*x244))+((x236*x243))+(((0.0040445566543383)*cj11*sj12))+(((-1.0)*x238*x239))+(((0.138523794241362)*sj12))+((x235*x236))+(((1.24460590083048)*cj12))+(((-1.0)*x235*x246))+(((-1.0)*cj12*x241))+((x242*x247))+(((-1.0)*x240*x247))+((cj11*x235*x240))+((sj11*x238*x240))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x248=IKcos(j13);
IkReal x249=IKsin(j13);
IkReal x250=((1.0)*cj11);
IkReal x251=(cj10*r01);
IkReal x252=(px*sj10);
IkReal x253=((1.0)*sj11);
IkReal x254=(r00*sj10);
IkReal x255=(cj10*py);
IkReal x256=((0.707106781186548)*cj14);
IkReal x257=(cj12*x249);
IkReal x258=(cj12*x248);
IkReal x259=(sj12*x249);
IkReal x260=(sj12*x248);
IkReal x261=(x256*x259);
IkReal x262=(x256*x260);
IkReal x263=(x256*x258);
IkReal x264=(x256*x257);
IkReal x265=(x264+x262);
evalcond[0]=((0.02080007)+(((-1.0)*x250*x252))+((cj11*x255))+(((0.01152581)*x259))+(((-0.04659834)*x257))+(((0.0002)*cj11))+((pz*sj11))+(((-0.01152581)*x258))+(((0.0742)*cj12))+(((-0.0171)*sj12))+(((-0.04659834)*x260)));
evalcond[1]=((-0.05639997)+(((-1.0)*x252*x253))+(((0.0171)*cj12))+(((0.0742)*sj12))+(((-0.04659834)*x259))+(((-0.01152581)*x257))+(((-1.0)*pz*x250))+(((0.04659834)*x258))+(((-0.01152581)*x260))+((sj11*x255))+(((0.0002)*sj11)));
evalcond[2]=(((r02*sj11))+(((-1.0)*x250*x254))+((cj11*x251))+x265+x261+(((-1.0)*x263)));
evalcond[3]=((((-1.0)*r02*x250))+x261+(((-1.0)*x265))+(((-1.0)*x263))+((sj11*x251))+(((-1.0)*x253*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - daedalus (69868a6ae01d2fb3d97d8bf022f407ef)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
