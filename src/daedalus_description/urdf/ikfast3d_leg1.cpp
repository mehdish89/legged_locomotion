/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-08-21 11:00:12.266539
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.029062075)*x5);
x11=((0.707106781186548)*x5);
x12=((0.0171)*x0);
x13=((0.017536265)*x0);
x14=((0.707106781186548)*x6);
x15=((0.0742)*x4);
x16=((1.0)*x2);
x17=((0.029062075)*x6);
x18=((0.017536265)*x4);
x19=((1.0)*x4);
x20=((0.017536265)*x2);
x21=(x3*x7);
x22=(x3*x4);
x23=(x2*x3);
x24=(x1*x7);
x25=(x0*x1);
x26=(x1*x2);
x27=(x1*x4);
x28=(x19*x3);
x29=(x13*x22);
x30=(x13*x26);
x31=(x20*x24);
x32=(x18*x21);
x33=((((-1.0)*x28))+x26);
x34=(((x18*x3))+(((-1.0)*x1*x20)));
x35=((((-1.0)*x1*x16))+x28);
x36=((((-1.0)*x16*x3))+(((-1.0)*x1*x19)));
x37=(((x1*x18))+((x20*x3)));
x38=(((x0*x22))+(((-1.0)*x16*x25)));
x39=((((-1.0)*x19*x21))+((x2*x24)));
x40=(((x2*x21))+((x24*x4)));
x41=(x13*(((((-1.0)*x23))+(((-1.0)*x27)))));
x42=(((x0*x16*x3))+((x19*x25)));
x43=((((-1.0)*x18*x24))+(((-1.0)*x20*x21)));
x44=((-1.0)*x42);
x45=((((-1.0)*x19*x24))+(((-1.0)*x16*x21)));
IkReal x46=((1.0)*x10);
IkReal x47=((1.0)*x17);
eetrans[0]=((-0.0249)+(((-1.0)*x15*x25))+(((-1.0)*x42*x46))+(((-1.0)*x38*x46))+(((-1.0)*x38*x47))+(((-1.0)*x12*x22))+((x6*(((((-1.0)*x29))+x30))))+((x41*x6))+((x41*x5))+((x5*(((((-1.0)*x30))+x29))))+(((0.0002)*x0))+(((-0.0742)*x0*x23))+(((-0.05640003)*x25))+(((-1.0)*x44*x47))+(((-0.0305)*x7))+((x12*x26))+(((-0.02079992)*x0*x3)));
eetrans[1]=((((0.0171)*x2*x24))+(((-1.0)*x15*x24))+((x10*x39))+((x10*x45))+((x17*x39))+(((-0.02079992)*x21))+(((-0.0742)*x2*x21))+((x17*x40))+(((0.0002)*x7))+(((-0.05640003)*x24))+(((0.0305)*x0))+(((-0.0171)*x21*x4))+((x43*x6))+((x43*x5))+((x5*(((((-1.0)*x31))+x32))))+((x6*(((((-1.0)*x32))+x31)))));
eetrans[2]=((0.0586)+(((-0.0742)*x26))+(((-0.0171)*x27))+(((-0.0171)*x23))+((x10*x35))+((x10*x36))+(((-0.02079992)*x1))+((x17*x36))+((x17*x33))+((x34*x6))+((x34*x5))+(((-1.0)*x37*x6))+(((0.05640003)*x3))+((x37*x5))+((x15*x3)));
eerot[0]=((((-1.0)*x7*x8))+((x9*((((x11*x42))+(((-1.0)*x14*x44))+((x14*x38))+(((-1.0)*x11*x38)))))));
eerot[1]=(((x0*x8))+((x9*(((((-1.0)*x14*x39))+((x11*x39))+((x14*x40))+(((-1.0)*x11*x45)))))));
eerot[2]=(x9*(((((-1.0)*x14*x36))+((x11*x36))+((x14*x33))+(((-1.0)*x11*x35)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0249)+px);
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.0586)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x50.valid){
continue;
}
IkReal x48=((1.0)*(x50.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x51=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x51.valid){
continue;
}
if( (((0.0305)*(x51.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0305)*(x51.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x49=IKasin(((0.0305)*(x51.value)));
j0array[0]=((((-1.0)*x49))+(((-1.0)*x48)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x48))+x49);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x52=py*py;
IkReal x53=pz*pz;
IkReal x54=px*px;
IkReal x55=(py*r01);
IkReal x56=(pz*r00);
IkReal x57=((0.0016)*sj0);
IkReal x58=((0.244)*cj0);
IkReal x59=(r00*sj0);
IkReal x60=(cj0*r01);
IkReal x61=((0.0016)*pz);
IkReal x62=(py*r02);
IkReal x63=((0.122)*sj0);
IkReal x64=((0.122)*px);
IkReal x65=(cj0*r00);
IkReal x66=(px*r00);
IkReal x67=(pz*sj0);
IkReal x68=((0.244)*r01);
IkReal x69=(cj0*pz);
IkReal x70=(pz*r02);
IkReal x71=(px*r02);
IkReal x72=((4.0)*px);
IkReal x73=((0.306746102470137)*sj0);
IkReal x74=(r01*sj0);
IkReal x75=((0.144454137529863)*sj0);
IkReal x76=((8.0)*px);
IkReal x77=(py*r00);
IkReal x78=((0.330235610769511)*sj0);
IkReal x79=((0.165436250769511)*sj0);
IkReal x80=((0.163836250769511)*sj0);
IkReal x81=((0.331835610769511)*sj0);
IkReal x82=((0.00231965119466083)*x74);
IkReal x83=((0.0760541375298634)*x66);
IkReal x84=((0.0760541375298634)*x55);
IkReal x85=((0.0760541375298634)*x70);
IkReal x86=((0.00231965119466083)*x65);
IkReal x87=(r01*x64);
IkReal x88=((0.122)*x77);
IkReal x89=(r02*x61);
IkReal x90=((4.88e-5)*x74);
IkReal x91=((0.0016)*x66);
IkReal x92=((0.244)*x77);
IkReal x93=((0.0016)*x55);
IkReal x94=((4.88e-5)*x65);
IkReal x95=(px*x68);
IkReal x96=((0.0114419561253392)*x65);
IkReal x97=((0.375146102470137)*x55);
IkReal x98=((0.375146102470137)*x70);
IkReal x99=((0.375146102470137)*x66);
IkReal x100=((0.0114419561253392)*x74);
IkReal x101=((2.0)*x54);
IkReal x102=((4.0)*x53);
IkReal x103=((2.0)*x52);
IkReal x104=((2.0)*x53);
IkReal x105=((4.0)*x52);
IkReal x106=((4.0)*x54);
IkReal x107=((4.0)*pz*x55);
IkReal x108=(pz*r01*x63);
IkReal x109=((0.122)*cj0*x56);
IkReal x110=(r02*x104);
IkReal x111=(x56*x72);
IkReal x112=(x62*x63);
IkReal x113=(cj0*r02*x64);
IkReal x114=(r02*x103);
IkReal x115=(r02*x101);
IkReal x116=((0.306746102470137)*cj0*x62);
IkReal x117=(x56*x73);
IkReal x118=((0.306746102470137)*pz*x60);
IkReal x119=(x71*x73);
IkReal x120=((0.0016)*cj0*x62);
IkReal x121=(x58*x71);
IkReal x122=(r02*x106);
IkReal x123=(r02*x105);
IkReal x124=((0.244)*sj0*x62);
IkReal x125=(x56*x57);
IkReal x126=(x56*x76);
IkReal x127=(x67*x68);
IkReal x128=((8.0)*pz*x55);
IkReal x129=(x57*x71);
IkReal x130=(x56*x58);
IkReal x131=(r02*x102);
IkReal x132=(x60*x61);
IkReal x133=(x71*x75);
IkReal x134=((0.144454137529863)*pz*x60);
IkReal x135=((0.144454137529863)*cj0*x62);
IkReal x136=(x56*x75);
IkReal x137=(sj0*x55*x72);
IkReal x138=((4.0)*x67*x71);
IkReal x139=(x101*x59);
IkReal x140=(x104*x60);
IkReal x141=(x101*x60);
IkReal x142=((4.0)*x62*x69);
IkReal x143=(x103*x60);
IkReal x144=(x103*x59);
IkReal x145=(x104*x59);
IkReal x146=(py*x65*x72);
IkReal x147=(x105*x59);
IkReal x148=(py*x65*x76);
IkReal x149=(x102*x59);
IkReal x150=((8.0)*x62*x69);
IkReal x151=(x105*x60);
IkReal x152=(x102*x60);
IkReal x153=(x106*x59);
IkReal x154=(sj0*x55*x76);
IkReal x155=((8.0)*x67*x71);
IkReal x156=(x106*x60);
IkReal x157=(x135+x136);
IkReal x158=(x119+x118);
IkReal x159=(x134+x133);
IkReal x160=(x117+x116);
IkReal x161=(x82+x83+x86+x84+x85);
IkReal x162=(x100+x99+x98+x97+x96);
IkReal x163=(x113+x112+x115+x114);
IkReal x164=(x111+x110+x108+x109+x107);
IkReal x165=(x124+x125+x122+x123+x120+x121);
IkReal x166=(x131+x130+x132+x126+x127+x128+x129);
IkReal x167=(x140+x141+x137+x139+x138+x87);
IkReal x168=(x142+x143+x144+x145+x146+x88);
IkReal x169=(x156+x155+x154+x153+x152+x95);
IkReal x170=(x151+x150+x147+x148+x149+x89+x91+x90+x93+x92+x94);
IkReal x171=((((-1.0)*x165))+(((-0.0283456317141046)*r02))+x166+(((-0.0306475473829122)*x59))+(((0.0306475473829122)*x60)));
IkReal x172=((((-1.0)*x166))+(((0.0141128832227984)*r02))+(((-0.0128499277140245)*x60))+x165+(((0.0128499277140245)*x59)));
IkReal x173=((((-0.330235610769511)*cj0*x62))+(((-1.0)*x164))+(((-1.0)*x161))+(((-0.00936275875301875)*x59))+(((0.330235610769511)*pz*x60))+x163+(((0.00936275875301875)*x60))+(((-1.0)*x56*x78))+((x71*x78))+(((0.0131444801949204)*r02)));
IkReal x174=((((0.00939318040803069)*x59))+(((-1.0)*x161))+(((-1.0)*x163))+(((-0.0132768944392282)*r02))+(((-0.331835610769511)*cj0*x62))+x164+(((-0.00939318040803069)*x60))+(((0.331835610769511)*pz*x60))+(((-1.0)*x56*x81))+((x71*x81)));
IkReal x175=((((-0.0124318785575255)*x60))+(((-1.0)*x162))+(((-1.0)*x164))+(((-0.165436250769511)*pz*x60))+x163+((x56*x79))+(((0.0124318785575255)*x59))+(((0.165436250769511)*cj0*x62))+(((-0.0139351162944249)*r02))+(((-1.0)*x71*x79)));
IkReal x176=((((-1.0)*x162))+(((-1.0)*x163))+(((-1.0)*x71*x80))+(((0.0122818201165374)*x60))+x164+(((-0.0122818201165374)*x59))+((x56*x80))+(((-0.163836250769511)*pz*x60))+(((0.163836250769511)*cj0*x62))+(((0.0140009707947327)*r02)));
IkReal x177=((((-1.0)*x169))+(((0.0187559391610494)*r02))+(((0.0264210546341486)*x59))+x170+(((-0.0264210546341486)*x60)));
IkReal x178=((((0.0279364070891576)*x60))+(((-1.0)*x169))+(((-0.0247136986740629)*r02))+(((-0.0279364070891576)*x59))+x170);
IkReal x179=((((-0.131363749230489)*x70))+(((-1.0)*x158))+(((-0.0152624244709621)*r02))+(((-1.0)*x167))+(((-0.00400659435152992)*x74))+x168+x160+(((0.0141990886068984)*x59))+(((-0.131363749230489)*x55))+(((-0.131363749230489)*x66))+(((-0.00400659435152992)*x65))+(((-0.0141990886068984)*x60)));
IkReal x180=((((-1.0)*x158))+(((-0.132963749230489)*x70))+(((-0.132963749230489)*x55))+(((-1.0)*x168))+(((-0.0141462231072062)*x59))+(((-0.132963749230489)*x66))+x160+x167+(((0.0153851229119501)*r02))+(((0.0141462231072062)*x60))+(((-0.00405539435152992)*x65))+(((-0.00405539435152992)*x74)));
IkReal x181=((((-1.0)*x157))+(((-1.0)*x168))+(((0.00101978612847008)*x65))+(((0.0334356107695108)*x66))+(((0.0334356107695108)*x55))+x167+x159+(((0.00706312873355313)*x60))+(((0.00101978612847008)*x74))+(((0.0334356107695108)*x70))+(((0.00639607302950628)*r02))+(((-0.00706312873355313)*x59)));
IkReal x182=((((-1.0)*x157))+(((0.0350356107695108)*x55))+(((0.00106858612847008)*x65))+(((0.0350356107695108)*x66))+(((-1.0)*x167))+x168+x159+(((0.0350356107695108)*x70))+(((-0.00645385468451823)*r02))+(((0.00704943448924532)*x59))+(((0.00106858612847008)*x74))+(((-0.00704943448924532)*x60)));
IkReal gconst40=x173;
IkReal gconst41=x177;
IkReal gconst42=x174;
IkReal gconst43=x179;
IkReal gconst44=x171;
IkReal gconst45=x180;
IkReal gconst46=x173;
IkReal gconst47=x177;
IkReal gconst48=x174;
IkReal gconst49=x179;
IkReal gconst50=x171;
IkReal gconst51=x180;
IkReal gconst52=x181;
IkReal gconst53=x172;
IkReal gconst54=x182;
IkReal gconst55=x175;
IkReal gconst56=x178;
IkReal gconst57=x176;
IkReal gconst58=x181;
IkReal gconst59=x172;
IkReal gconst60=x182;
IkReal gconst61=x175;
IkReal gconst62=x178;
IkReal gconst63=x176;
IkReal x183=(gconst42*gconst43);
IkReal x184=(gconst45*gconst46);
IkReal x185=((1.0)*gconst52);
IkReal x186=(gconst46*gconst57);
IkReal x187=(gconst41*gconst62);
IkReal x188=(gconst53*gconst57);
IkReal x189=(gconst50*gconst58);
IkReal x190=(gconst54*gconst55);
IkReal x191=((1.0)*gconst59);
IkReal x192=(gconst48*gconst61);
IkReal x193=(gconst40*gconst57);
IkReal x194=(gconst50*gconst53);
IkReal x195=(gconst43*gconst54);
IkReal x196=(gconst46*gconst51);
IkReal x197=(gconst42*gconst47);
IkReal x198=(gconst56*gconst61);
IkReal x199=(gconst41*gconst45);
IkReal x200=(gconst45*gconst53);
IkReal x201=((1.0)*gconst60);
IkReal x202=(gconst42*gconst55);
IkReal x203=(gconst44*gconst49);
IkReal x204=(gconst54*gconst59);
IkReal x205=((1.0)*gconst54);
IkReal x206=(gconst46*gconst62);
IkReal x207=((1.0)*gconst40);
IkReal x208=(gconst41*gconst50);
IkReal x209=(gconst46*gconst63);
IkReal x210=(gconst58*gconst63);
IkReal x211=(gconst58*gconst62);
IkReal x212=(gconst45*gconst52);
IkReal x213=(gconst48*gconst49);
IkReal x214=(gconst51*gconst58);
IkReal x215=(gconst49*gconst60);
IkReal x216=(gconst41*gconst57);
IkReal x217=(gconst42*gconst59);
IkReal x218=(gconst49*gconst56);
IkReal x219=(gconst44*gconst61);
IkReal x220=(gconst46*gconst50);
IkReal x221=(gconst52*gconst57);
IkReal x222=(gconst47*gconst54);
IkReal x223=(gconst40*gconst45);
IkReal x224=(gconst60*gconst61);
IkReal x225=(gconst53*gconst62);
IkReal x226=((1.0)*x213);
IkReal x227=((1.0)*gconst42*gconst56);
IkReal x228=((1.0)*gconst47*gconst61);
IkReal x229=((1.0)*gconst42*gconst44);
IkReal x230=((1.0)*gconst47*gconst49);
op[0]=(((x190*x210))+((x198*x204))+(((-1.0)*gconst61*x188*x191))+(((-1.0)*gconst61*x190*x201))+(((-1.0)*gconst56*x205*x211))+((x221*x224))+((x188*x211))+(((-1.0)*gconst57*x185*x210)));
op[1]=(((x190*x214))+((x192*x221))+((x204*x218))+((x204*x219))+(((-1.0)*gconst49*x190*x201))+(((-1.0)*gconst61*x191*x200))+((x215*x221))+(((-1.0)*gconst44*x205*x211))+((x202*x210))+(((-1.0)*gconst61*x191*x216))+((x198*x222))+(((-1.0)*gconst49*x188*x191))+((x193*x224))+((x190*x209))+((x188*x189))+((x198*x217))+(((-1.0)*x188*x228))+((x186*x225))+(((-1.0)*x193*x210))+(((-1.0)*gconst61*x195*x201))+(((-1.0)*gconst63*x185*x186))+(((-1.0)*gconst45*x185*x210))+(((-1.0)*gconst56*x189*x205))+(((-1.0)*gconst61*x201*x202))+(((-1.0)*x211*x227))+(((-1.0)*gconst56*x205*x206))+(((-1.0)*x190*x192))+(((-1.0)*gconst57*x185*x214))+((x200*x211))+((gconst57*gconst58*x187))+((x195*x210))+((x212*x224)));
op[2]=((((-1.0)*x216*x228))+(((-1.0)*x190*x226))+(((-1.0)*gconst49*x191*x216))+((x186*x187))+(((-1.0)*x206*x227))+((x184*x225))+((x186*x194))+((x193*x215))+((x202*x214))+(((-1.0)*gconst56*x205*x220))+((x183*x210))+(((-1.0)*gconst49*x201*x202))+((x195*x209))+(((-1.0)*gconst63*x184*x185))+(((-1.0)*gconst44*x205*x206))+(((-1.0)*x192*x202))+(((-1.0)*gconst49*x191*x200))+((x189*x200))+(((-1.0)*x189*x227))+((x213*x221))+(((-1.0)*gconst45*x207*x210))+(((-1.0)*gconst49*x195*x201))+((x223*x224))+(((-1.0)*gconst44*x189*x205))+(((-1.0)*gconst61*x183*x201))+((x219*x222))+(((-1.0)*gconst51*x185*x186))+(((-1.0)*x200*x228))+(((-1.0)*x193*x214))+((x192*x193))+((x212*x215))+(((-1.0)*gconst45*x185*x214))+((x202*x209))+((x218*x222))+((x189*x216))+((x190*x196))+((x203*x204))+(((-1.0)*gconst61*x191*x199))+((gconst45*gconst58*x187))+(((-1.0)*x211*x229))+((x217*x219))+((x217*x218))+((x192*x212))+((x197*x198))+(((-1.0)*gconst63*x186*x207))+(((-1.0)*x188*x230))+((x195*x214))+(((-1.0)*x192*x195)));
op[3]=(((x192*x223))+(((-1.0)*x206*x229))+(((-1.0)*x200*x230))+((x196*x202))+((x197*x218))+((x197*x219))+((x215*x223))+((x193*x213))+((x183*x214))+((x203*x217))+(((-1.0)*x216*x230))+(((-1.0)*x195*x226))+((x184*x194))+(((-1.0)*x189*x229))+((x189*x199))+(((-1.0)*gconst45*x207*x214))+((x203*x222))+((x184*x187))+(((-1.0)*gconst49*x183*x201))+(((-1.0)*gconst51*x184*x185))+(((-1.0)*x199*x228))+((x195*x196))+(((-1.0)*gconst49*x191*x199))+(((-1.0)*x183*x192))+((x212*x213))+(((-1.0)*x202*x226))+(((-1.0)*x220*x227))+(((-1.0)*gconst51*x186*x207))+(((-1.0)*gconst63*x184*x207))+(((-1.0)*gconst44*x205*x220))+((x183*x209))+((x186*x208)));
op[4]=(((x213*x223))+((x184*x208))+(((-1.0)*x183*x226))+((x197*x203))+(((-1.0)*x220*x229))+(((-1.0)*x199*x230))+(((-1.0)*gconst51*x184*x207))+((x183*x196)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x231 = IKatan2WithCheck(IkReal(((((((((-0.153373051235068)*cj0*py*r02))+(((0.153373051235068)*cj2*px*r02*sj0))+(((0.187573051235068)*pz*r02*sj2))+(((0.00572097806266958)*cj0*r00*sj2))+(((-3.06746102470137e-5)*cj2*r02))+(((-3.06746102470137e-5)*r02))+(((0.00201549717576496)*cj2*r01*sj0))+(((-1.32163749230489e-5)*cj2*r00*sj0))+(((-3.75146102470137e-5)*r00*sj0*sj2))+(((0.0660818746152446)*px*r00))+(((0.0660818746152446)*cj2*py*r01))+(((-1.64636250769511e-5)*r02*sj2))+(((-0.0823181253847554)*pz*r00*sj0*sj2))+(((3.75146102470137e-5)*cj0*r01*sj2))+(((0.0660818746152446)*cj2*px*r00))+(((0.00572097806266958)*r01*sj0*sj2))+(((0.0660818746152446)*cj2*pz*r02))+(((0.187573051235068)*py*r01*sj2))+(((-0.153373051235068)*cj0*cj2*py*r02))+(((0.187573051235068)*px*r00*sj2))+(((-1.32163749230489e-5)*r00*sj0))+(((-0.153373051235068)*pz*r00*sj0))+(((0.153373051235068)*cj0*pz*r01))+(((-0.153373051235068)*cj2*pz*r00*sj0))+(((0.00201549717576496)*r01*sj0))+(((0.0660818746152446)*py*r01))+(((0.153373051235068)*px*r02*sj0))+(((0.0823181253847554)*px*r02*sj0*sj2))+(((1.32163749230489e-5)*cj0*cj2*r01))+(((-0.0823181253847554)*cj0*py*r02*sj2))+(((0.0660818746152446)*pz*r02))+(((1.32163749230489e-5)*cj0*r01))+(((0.00201549717576496)*cj0*r00))+(((0.00201549717576496)*cj0*cj2*r00))+(((0.0823181253847554)*cj0*pz*r01*sj2))+(((0.153373051235068)*cj0*cj2*pz*r01))))*(((((-0.061)*cj2*pz*r01*sj0))+(((0.00321248192850613)*r02*sj2))+(((0.0004)*cj0*py*r02))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.061)*cj0*pz*r00))+(((0.0004)*pz*r00*sj0))+((r00*sj0*sj2*(px*px)))+(((-0.00468898479026236)*cj2*r00*sj0))+(((-2.0)*cj0*px*py*r00*sj2))+(((0.00468898479026236)*cj0*cj2*r01))+(((0.00352814080569961)*cj0*r01*sj2))+((cj2*r02*(py*py)))+(((-0.0004)*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((-0.061)*pz*r01*sj0))+(((0.061)*px*r01*sj2))+((r02*(px*px)))+(((-0.00352814080569961)*r00*sj0*sj2))+((cj0*r01*sj2*(pz*pz)))+(((-0.061)*py*r00*sj2))+(((-1.22e-5)*r01*sj0*sj2))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-0.0004)*cj2*px*r02*sj0))+(((0.00660534365853715)*cj2*r02))+(((0.00660534365853715)*r02))+(((0.00468898479026236)*cj0*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-0.0004)*cj0*pz*r01))+(((-0.0004)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((0.061)*cj0*cj2*px*r02))+(((2.0)*px*py*r01*sj0*sj2))+(((0.061)*cj0*px*r02))+(((-0.061)*cj0*cj2*pz*r00))+(((-0.0004)*px*r00*sj2))+(((-2.0)*cj2*px*pz*r00))+(((0.061)*cj2*py*r02*sj0))+(((-0.00468898479026236)*r00*sj0))+(((-2.0)*py*pz*r01))+(((0.061)*py*r02*sj0))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.0004)*cj0*cj2*pz*r01))+(((-1.22e-5)*cj0*r00*sj2))+((cj0*r01*sj2*(px*px)))+(((-0.0004)*py*r01*sj2))+(((0.0004)*cj2*pz*r00*sj0))+(((-1.0)*r02*(pz*pz)))))))+(((((((-0.00115982559733042)*r01*sj0))+(((-0.0380270687649317)*px*r00))+(((0.0722270687649317)*cj0*pz*r01*sj2))+(((-0.00115982559733042)*cj0*cj2*r00))+(((-0.0380270687649317)*cj2*px*r00))+(((0.165517805384755)*px*r02*sj0))+(((0.000522093064235039)*cj0*r00*sj2))+(((0.0171178053847554)*py*r01*sj2))+(((-3.31035610769511e-5)*cj2*r02))+(((-0.165517805384755)*cj0*cj2*py*r02))+(((0.0722270687649317)*px*r02*sj0*sj2))+(((-3.31035610769511e-5)*r02))+(((0.0171178053847554)*px*r00*sj2))+(((0.165517805384755)*cj0*pz*r01))+(((-0.00115982559733042)*cj2*r01*sj0))+(((-0.0380270687649317)*py*r01))+(((-0.0380270687649317)*cj2*py*r01))+(((7.60541375298634e-6)*cj2*r00*sj0))+(((0.165517805384755)*cj2*px*r02*sj0))+(((-0.0380270687649317)*cj2*pz*r02))+(((-1.44454137529863e-5)*r02*sj2))+(((7.60541375298634e-6)*r00*sj0))+(((0.0171178053847554)*pz*r02*sj2))+(((-0.0380270687649317)*pz*r02))+(((3.42356107695108e-6)*cj0*r01*sj2))+(((-0.00115982559733042)*cj0*r00))+(((0.165517805384755)*cj0*cj2*pz*r01))+(((0.000522093064235039)*r01*sj0*sj2))+(((-0.0722270687649317)*cj0*py*r02*sj2))+(((-0.0722270687649317)*pz*r00*sj0*sj2))+(((-3.42356107695108e-6)*r00*sj0*sj2))+(((-0.165517805384755)*cj2*pz*r00*sj0))+(((-0.165517805384755)*pz*r00*sj0))+(((-7.60541375298634e-6)*cj0*r01))+(((-0.165517805384755)*cj0*py*r02))+(((-7.60541375298634e-6)*cj0*cj2*r01))))*((((r02*sj2*(py*py)))+(((-0.0004)*cj0*pz*r01*sj2))+(((-0.00766188684572804)*cj2*r02))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((0.0004)*pz*r02))+(((0.0004)*cj2*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.00698402177228939)*r02*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((1.22e-5)*cj2*r01*sj0))+(((0.00708632792852615)*r00*sj0))+(((-0.00708632792852615)*cj0*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+(((0.00617842466851573)*r00*sj0*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.061)*py*r02*sj0*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((1.22e-5)*cj0*cj2*r00))+(((-2.0)*cj2*px*py*r01*sj0))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.061)*pz*r01*sj0*sj2))+(((-0.00617842466851573)*cj0*r01*sj2))+(((-0.061)*cj0*pz*r00*sj2))+(((0.00708632792852615)*cj2*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((1.22e-5)*cj0*r00))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((-0.00766188684572804)*r02))+(((0.0004)*cj2*py*r01))+(((-0.00708632792852615)*cj0*cj2*r01))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2)))))))),((((((((0.0380270687649317)*pz*r02))+(((-0.000522093064235039)*cj0*r00*sj2))+(((-0.165517805384755)*cj0*pz*r01))+(((0.0380270687649317)*cj2*pz*r02))+(((-0.165517805384755)*cj0*cj2*pz*r01))+(((0.0380270687649317)*py*r01))+(((-7.60541375298634e-6)*cj2*r00*sj0))+(((0.165517805384755)*cj0*py*r02))+(((0.00115982559733042)*cj0*cj2*r00))+(((7.60541375298634e-6)*cj0*cj2*r01))+(((0.0722270687649317)*cj0*py*r02*sj2))+(((3.31035610769511e-5)*cj2*r02))+(((-0.0171178053847554)*py*r01*sj2))+(((-7.60541375298634e-6)*r00*sj0))+(((-0.0722270687649317)*px*r02*sj0*sj2))+(((-0.0722270687649317)*cj0*pz*r01*sj2))+(((0.00115982559733042)*r01*sj0))+(((0.165517805384755)*pz*r00*sj0))+(((-0.165517805384755)*px*r02*sj0))+(((0.00115982559733042)*cj2*r01*sj0))+(((0.0380270687649317)*cj2*px*r00))+(((-3.42356107695108e-6)*cj0*r01*sj2))+(((0.00115982559733042)*cj0*r00))+(((7.60541375298634e-6)*cj0*r01))+(((-0.0171178053847554)*px*r00*sj2))+(((0.0722270687649317)*pz*r00*sj0*sj2))+(((0.165517805384755)*cj0*cj2*py*r02))+(((-0.000522093064235039)*r01*sj0*sj2))+(((3.31035610769511e-5)*r02))+(((0.0380270687649317)*px*r00))+(((1.44454137529863e-5)*r02*sj2))+(((-0.0171178053847554)*pz*r02*sj2))+(((-0.165517805384755)*cj2*px*r02*sj0))+(((0.0380270687649317)*cj2*py*r01))+(((3.42356107695108e-6)*r00*sj0*sj2))+(((0.165517805384755)*cj2*pz*r00*sj0))))*((((r00*sj0*sj2*(pz*pz)))+(((-0.061)*cj2*py*r02*sj0))+(((-0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.061)*cj2*pz*r01*sj0))+(((0.0004)*py*r01*sj2))+(((-0.00698410177228939)*r00*sj0*sj2))+(((0.00766188684572804)*cj0*cj2*r01))+(((2.0)*px*pz*r00))+(((-1.0)*cj2*r02*(px*px)))+(((0.061)*cj0*cj2*pz*r00))+(((0.061)*cj0*pz*r00))+((cj2*r02*(pz*pz)))+((r00*sj0*sj2*(py*py)))+(((2.0)*cj2*px*pz*r00))+(((-0.00766188684572804)*r00*sj0))+(((0.061)*pz*r01*sj0))+(((-0.061)*px*r01*sj2))+(((-0.00708640792852615)*cj2*r02))+(((0.0004)*cj2*px*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((0.00766188684572804)*cj0*r01))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((0.0004)*px*r02*sj0))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r01))+(((-0.0004)*pz*r00*sj0))+(((-0.061)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.061)*py*r02*sj0))+(((0.0004)*pz*r02*sj2))+(((-0.00617842466851573)*r02*sj2))+(((-0.00766188684572804)*cj2*r00*sj0))+(((-0.0004)*cj0*py*r02))+(((-0.061)*cj0*px*r02))+(((0.0004)*px*r00*sj2))+(((0.0004)*cj0*pz*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.00708640792852615)*r02))+(((1.22e-5)*r01*sj0*sj2))+(((-1.0)*r02*(px*px)))+(((0.061)*py*r00*sj2))+(((0.00698410177228939)*cj0*r01*sj2))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((0.0004)*cj0*cj2*pz*r01))+(((1.22e-5)*cj0*r00*sj2))+(((-0.0004)*cj2*pz*r00*sj0))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))))+(((((((-0.00201549717576496)*cj0*cj2*r00))+(((-0.0660818746152446)*px*r00))+(((0.0823181253847554)*cj0*py*r02*sj2))+(((-0.153373051235068)*cj2*px*r02*sj0))+(((-0.187573051235068)*px*r00*sj2))+(((-0.0823181253847554)*px*r02*sj0*sj2))+(((3.75146102470137e-5)*r00*sj0*sj2))+(((-0.0660818746152446)*cj2*pz*r02))+(((3.06746102470137e-5)*cj2*r02))+(((-0.0660818746152446)*pz*r02))+(((-0.00201549717576496)*r01*sj0))+(((-0.0660818746152446)*cj2*px*r00))+(((-0.187573051235068)*py*r01*sj2))+(((-0.00201549717576496)*cj2*r01*sj0))+(((0.153373051235068)*cj0*py*r02))+(((-0.0660818746152446)*cj2*py*r01))+(((-1.32163749230489e-5)*cj0*cj2*r01))+(((-0.153373051235068)*cj0*cj2*pz*r01))+(((-3.75146102470137e-5)*cj0*r01*sj2))+(((0.0823181253847554)*pz*r00*sj0*sj2))+(((-1.32163749230489e-5)*cj0*r01))+(((-0.0660818746152446)*py*r01))+(((1.32163749230489e-5)*cj2*r00*sj0))+(((3.06746102470137e-5)*r02))+(((0.153373051235068)*cj2*pz*r00*sj0))+(((-0.00201549717576496)*cj0*r00))+(((-0.153373051235068)*cj0*pz*r01))+(((1.32163749230489e-5)*r00*sj0))+(((0.153373051235068)*pz*r00*sj0))+(((-0.187573051235068)*pz*r02*sj2))+(((-0.153373051235068)*px*r02*sj0))+(((-0.00572097806266958)*cj0*r00*sj2))+(((-0.00572097806266958)*r01*sj0*sj2))+(((0.153373051235068)*cj0*cj2*py*r02))+(((-0.0823181253847554)*cj0*pz*r01*sj2))+(((1.64636250769511e-5)*r02*sj2))))*((((r02*sj2*(py*py)))+(((0.00468898479026236)*cj2*r02))+(((-0.0004)*cj0*pz*r01*sj2))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((0.0004)*pz*r02))+(((0.0004)*cj2*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00660526365853715)*cj2*r00*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((1.22e-5)*cj2*r01*sj0))+(((-0.00660526365853715)*cj0*cj2*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.061)*py*r02*sj0*sj2))+(((-0.00321248192850613)*cj0*r01*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((1.22e-5)*cj0*cj2*r00))+(((0.00321248192850613)*r00*sj0*sj2))+(((-2.0)*cj2*px*py*r01*sj0))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.061)*pz*r01*sj0*sj2))+(((0.00468898479026236)*r02))+(((-0.061)*cj0*pz*r00*sj2))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.00660526365853715)*cj0*r01))+(((0.00352822080569961)*r02*sj2))+(((1.22e-5)*cj0*r00))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((0.0004)*cj2*py*r01))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((0.00660526365853715)*r00*sj0))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(IKsign((((((((r02*sj2*(py*py)))+(((-0.0004)*cj0*pz*r01*sj2))+(((-0.00766188684572804)*cj2*r02))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((0.0004)*pz*r02))+(((0.0004)*cj2*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.00698402177228939)*r02*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((1.22e-5)*cj2*r01*sj0))+(((0.00708632792852615)*r00*sj0))+(((-0.00708632792852615)*cj0*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+(((0.00617842466851573)*r00*sj0*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.061)*py*r02*sj0*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((1.22e-5)*cj0*cj2*r00))+(((-2.0)*cj2*px*py*r01*sj0))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.061)*pz*r01*sj0*sj2))+(((-0.00617842466851573)*cj0*r01*sj2))+(((-0.061)*cj0*pz*r00*sj2))+(((0.00708632792852615)*cj2*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((1.22e-5)*cj0*r00))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((-0.00766188684572804)*r02))+(((0.0004)*cj2*py*r01))+(((-0.00708632792852615)*cj0*cj2*r01))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2))))*(((((-1.22e-5)*cj2*r01*sj0))+(((-1.0)*cj0*cj2*r01*(py*py)))+(((-0.00352822080569961)*r02*sj2))+(((-0.00468898479026236)*cj2*r02))+(((0.0004)*cj0*pz*r01*sj2))+(((-1.0)*r00*sj0*(pz*pz)))+(((-0.00321248192850613)*r00*sj0*sj2))+(((2.0)*cj2*px*py*r01*sj0))+(((1.0)*cj0*r01*(px*px)))+(((-0.00468898479026236)*r02))+(((2.0)*px*pz*r02*sj0))+(((1.0)*cj0*cj2*r01*(pz*pz)))+(((0.0004)*px*r02*sj0*sj2))+(((-0.00660526365853715)*r00*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((0.00660526365853715)*cj0*cj2*r01))+(((1.0)*cj0*r01*(pz*pz)))+(((-0.0004)*py*r01))+(((-0.0004)*cj0*py*r02*sj2))+(((-0.0004)*cj2*py*r01))+(((-1.0)*cj2*r00*sj0*(pz*pz)))+(((-0.0004)*pz*r00*sj0*sj2))+(((1.0)*cj2*r00*sj0*(px*px)))+(((-0.0004)*px*r00))+(((1.0)*r00*sj0*(px*px)))+(((0.00321248192850613)*cj0*r01*sj2))+(((2.0)*px*py*r01*sj0))+(((-1.22e-5)*cj0*r00))+(((-1.22e-5)*r01*sj0))+(((-1.0)*r02*sj2*(py*py)))+(((-0.0004)*cj2*pz*r02))+(((-0.0004)*pz*r02))+(((2.0)*cj2*px*pz*r02*sj0))+(((0.00660526365853715)*cj0*r01))+(((-0.0004)*cj2*px*r00))+(((2.0)*py*pz*r01*sj2))+(((0.061)*px*r01))+(((-0.00660526365853715)*cj2*r00*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((0.061)*pz*r01*sj0*sj2))+(((1.0)*r02*sj2*(pz*pz)))+(((-2.0)*cj0*px*py*r00))+(((-0.061)*py*r00))+(((-0.061)*py*r02*sj0*sj2))+(((-1.0)*cj2*r00*sj0*(py*py)))+(((-2.0)*cj0*cj2*py*pz*r02))+(((-2.0)*cj0*py*pz*r02))+(((1.0)*cj0*cj2*r01*(px*px)))+(((-0.061)*cj2*py*r00))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj0*r01*(py*py)))+(((0.061)*cj2*px*r01))+(((-2.0)*cj0*cj2*px*py*r00))+(((0.061)*cj0*pz*r00*sj2))+(((-1.22e-5)*cj0*cj2*r00))+(((-0.061)*cj0*px*r02*sj2))))))+((((((r00*sj0*sj2*(pz*pz)))+(((-0.061)*cj2*py*r02*sj0))+(((-0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.061)*cj2*pz*r01*sj0))+(((0.0004)*py*r01*sj2))+(((-0.00698410177228939)*r00*sj0*sj2))+(((0.00766188684572804)*cj0*cj2*r01))+(((2.0)*px*pz*r00))+(((-1.0)*cj2*r02*(px*px)))+(((0.061)*cj0*cj2*pz*r00))+(((0.061)*cj0*pz*r00))+((cj2*r02*(pz*pz)))+((r00*sj0*sj2*(py*py)))+(((2.0)*cj2*px*pz*r00))+(((-0.00766188684572804)*r00*sj0))+(((0.061)*pz*r01*sj0))+(((-0.061)*px*r01*sj2))+(((-0.00708640792852615)*cj2*r02))+(((0.0004)*cj2*px*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((0.00766188684572804)*cj0*r01))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((0.0004)*px*r02*sj0))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r01))+(((-0.0004)*pz*r00*sj0))+(((-0.061)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.061)*py*r02*sj0))+(((0.0004)*pz*r02*sj2))+(((-0.00617842466851573)*r02*sj2))+(((-0.00766188684572804)*cj2*r00*sj0))+(((-0.0004)*cj0*py*r02))+(((-0.061)*cj0*px*r02))+(((0.0004)*px*r00*sj2))+(((0.0004)*cj0*pz*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.00708640792852615)*r02))+(((1.22e-5)*r01*sj0*sj2))+(((-1.0)*r02*(px*px)))+(((0.061)*py*r00*sj2))+(((0.00698410177228939)*cj0*r01*sj2))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((0.0004)*cj0*cj2*pz*r01))+(((1.22e-5)*cj0*r00*sj2))+(((-0.0004)*cj2*pz*r00*sj0))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(((((-0.061)*cj2*pz*r01*sj0))+(((0.00321248192850613)*r02*sj2))+(((0.0004)*cj0*py*r02))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.061)*cj0*pz*r00))+(((0.0004)*pz*r00*sj0))+((r00*sj0*sj2*(px*px)))+(((-0.00468898479026236)*cj2*r00*sj0))+(((-2.0)*cj0*px*py*r00*sj2))+(((0.00468898479026236)*cj0*cj2*r01))+(((0.00352814080569961)*cj0*r01*sj2))+((cj2*r02*(py*py)))+(((-0.0004)*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((-0.061)*pz*r01*sj0))+(((0.061)*px*r01*sj2))+((r02*(px*px)))+(((-0.00352814080569961)*r00*sj0*sj2))+((cj0*r01*sj2*(pz*pz)))+(((-0.061)*py*r00*sj2))+(((-1.22e-5)*r01*sj0*sj2))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-0.0004)*cj2*px*r02*sj0))+(((0.00660534365853715)*cj2*r02))+(((0.00660534365853715)*r02))+(((0.00468898479026236)*cj0*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-0.0004)*cj0*pz*r01))+(((-0.0004)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((0.061)*cj0*cj2*px*r02))+(((2.0)*px*py*r01*sj0*sj2))+(((0.061)*cj0*px*r02))+(((-0.061)*cj0*cj2*pz*r00))+(((-0.0004)*px*r00*sj2))+(((-2.0)*cj2*px*pz*r00))+(((0.061)*cj2*py*r02*sj0))+(((-0.00468898479026236)*r00*sj0))+(((-2.0)*py*pz*r01))+(((0.061)*py*r02*sj0))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.0004)*cj0*cj2*pz*r01))+(((-1.22e-5)*cj0*r00*sj2))+((cj0*r01*sj2*(px*px)))+(((-0.0004)*py*r01*sj2))+(((0.0004)*cj2*pz*r00*sj0))+(((-1.0)*r02*(pz*pz))))))))),-1);
if(!x232.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x231.value)+(((1.5707963267949)*(x232.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((-0.00115982559733042)*r01*sj0))+(((-0.0380270687649317)*px*r00))+(((0.0722270687649317)*cj0*pz*r01*sj2))+(((-0.00115982559733042)*cj0*cj2*r00))+(((-0.0380270687649317)*cj2*px*r00))+(((0.165517805384755)*px*r02*sj0))+((((((r02*sj2*(py*py)))+(((0.00468898479026236)*cj2*r02))+(((-0.0004)*cj0*pz*r01*sj2))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((0.0004)*pz*r02))+(((0.0004)*cj2*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.00660526365853715)*cj2*r00*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((1.22e-5)*cj2*r01*sj0))+(((-0.00660526365853715)*cj0*cj2*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.061)*py*r02*sj0*sj2))+(((-0.00321248192850613)*cj0*r01*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((1.22e-5)*cj0*cj2*r00))+(((0.00321248192850613)*r00*sj0*sj2))+(((-2.0)*cj2*px*py*r01*sj0))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.061)*pz*r01*sj0*sj2))+(((0.00468898479026236)*r02))+(((-0.061)*cj0*pz*r00*sj2))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.00660526365853715)*cj0*r01))+(((0.00352822080569961)*r02*sj2))+(((1.22e-5)*cj0*r00))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((0.0004)*cj2*py*r01))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((0.00660526365853715)*r00*sj0))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2))))*(IKsin(j1))))+(((0.000522093064235039)*cj0*r00*sj2))+(((0.0171178053847554)*py*r01*sj2))+(((-3.31035610769511e-5)*cj2*r02))+(((-0.165517805384755)*cj0*cj2*py*r02))+(((0.0722270687649317)*px*r02*sj0*sj2))+(((-3.31035610769511e-5)*r02))+(((0.0171178053847554)*px*r00*sj2))+(((((((-0.061)*cj2*pz*r01*sj0))+(((0.00321248192850613)*r02*sj2))+(((0.0004)*cj0*py*r02))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.061)*cj0*pz*r00))+(((0.0004)*pz*r00*sj0))+((r00*sj0*sj2*(px*px)))+(((-0.00468898479026236)*cj2*r00*sj0))+(((-2.0)*cj0*px*py*r00*sj2))+(((0.00468898479026236)*cj0*cj2*r01))+(((0.00352814080569961)*cj0*r01*sj2))+((cj2*r02*(py*py)))+(((-0.0004)*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+(((-0.061)*pz*r01*sj0))+(((0.061)*px*r01*sj2))+((r02*(px*px)))+(((-0.00352814080569961)*r00*sj0*sj2))+((cj0*r01*sj2*(pz*pz)))+(((-0.061)*py*r00*sj2))+(((-1.22e-5)*r01*sj0*sj2))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-0.0004)*cj2*px*r02*sj0))+(((0.00660534365853715)*cj2*r02))+(((0.00660534365853715)*r02))+(((0.00468898479026236)*cj0*r01))+(((2.0)*px*pz*r02*sj0*sj2))+(((-0.0004)*cj0*pz*r01))+(((-0.0004)*px*r02*sj0))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((0.061)*cj0*cj2*px*r02))+(((2.0)*px*py*r01*sj0*sj2))+(((0.061)*cj0*px*r02))+(((-0.061)*cj0*cj2*pz*r00))+(((-0.0004)*px*r00*sj2))+(((-2.0)*cj2*px*pz*r00))+(((0.061)*cj2*py*r02*sj0))+(((-0.00468898479026236)*r00*sj0))+(((-2.0)*py*pz*r01))+(((0.061)*py*r02*sj0))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.0004)*cj0*cj2*pz*r01))+(((-1.22e-5)*cj0*r00*sj2))+((cj0*r01*sj2*(px*px)))+(((-0.0004)*py*r01*sj2))+(((0.0004)*cj2*pz*r00*sj0))+(((-1.0)*r02*(pz*pz)))))*(IKcos(j1))))+(((0.165517805384755)*cj0*pz*r01))+(((-0.00115982559733042)*cj2*r01*sj0))+(((-0.0380270687649317)*py*r01))+(((-0.0380270687649317)*cj2*py*r01))+(((7.60541375298634e-6)*cj2*r00*sj0))+(((0.165517805384755)*cj2*px*r02*sj0))+(((-0.0380270687649317)*cj2*pz*r02))+(((-1.44454137529863e-5)*r02*sj2))+(((7.60541375298634e-6)*r00*sj0))+(((0.0171178053847554)*pz*r02*sj2))+(((-0.0380270687649317)*pz*r02))+(((3.42356107695108e-6)*cj0*r01*sj2))+(((-0.00115982559733042)*cj0*r00))+(((0.165517805384755)*cj0*cj2*pz*r01))+(((0.000522093064235039)*r01*sj0*sj2))+(((-0.0722270687649317)*cj0*py*r02*sj2))+(((-0.0722270687649317)*pz*r00*sj0*sj2))+(((-3.42356107695108e-6)*r00*sj0*sj2))+(((-0.165517805384755)*cj2*pz*r00*sj0))+(((-0.165517805384755)*pz*r00*sj0))+(((-7.60541375298634e-6)*cj0*r01))+(((-0.165517805384755)*cj0*py*r02))+(((-7.60541375298634e-6)*cj0*cj2*r01)));
evalcond[1]=((((-3.42356107695108e-6)*r00*sj0))+(((-0.000522093064235039)*cj0*cj2*r00))+(((-0.0722270687649317)*cj2*px*r02*sj0))+(((-0.0171178053847554)*cj2*pz*r02))+((((((r00*sj0*sj2*(pz*pz)))+(((-0.061)*cj2*py*r02*sj0))+(((0.0004)*cj0*py*r02))+(((-0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-0.00660526365853715)*cj0*r01*sj2))+(((-0.061)*cj0*pz*r00))+(((0.061)*cj2*pz*r01*sj0))+(((0.0004)*py*r01*sj2))+(((0.0004)*pz*r00*sj0))+(((0.00660526365853715)*r00*sj0*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((0.061)*cj0*cj2*pz*r00))+(((-0.00321248192850613)*cj0*r01))+((r02*(py*py)))+((cj2*r02*(pz*pz)))+(((-0.061)*pz*r01*sj0))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+(((2.0)*cj2*px*pz*r00))+(((-0.061)*px*r01*sj2))+(((0.0004)*cj2*px*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((0.00352822080569961)*r02))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r01))+(((-0.061)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-0.0004)*cj0*pz*r01))+(((-0.0004)*px*r02*sj0))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.00321248192850613)*cj0*cj2*r01))+(((0.0004)*pz*r02*sj2))+(((0.061)*cj0*px*r02))+(((0.0004)*px*r00*sj2))+(((-2.0)*px*py*r01*sj0*sj2))+(((0.00468898479026236)*r02*sj2))+(((-0.00321248192850613)*cj2*r00*sj0))+(((1.22e-5)*r01*sj0*sj2))+(((0.061)*py*r00*sj2))+(((0.00321248192850613)*r00*sj0))+(((-2.0)*py*pz*r01))+(((0.061)*py*r02*sj0))+(((0.0004)*cj0*cj2*pz*r01))+(((1.22e-5)*cj0*r00*sj2))+(((-0.00352822080569961)*cj2*r02))+(((-0.0004)*cj2*pz*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(IKsin(j1))))+(((-0.0171178053847554)*cj2*py*r01))+(((-0.0722270687649317)*cj0*cj2*pz*r01))+(((0.165517805384755)*px*r02*sj0*sj2))+(((-0.000522093064235039)*cj2*r01*sj0))+(((0.0722270687649317)*cj0*cj2*py*r02))+(((0.165517805384755)*cj0*pz*r01*sj2))+(((0.0171178053847554)*py*r01))+(((7.60541375298634e-6)*r00*sj0*sj2))+(((3.42356107695108e-6)*cj2*r00*sj0))+(((0.000522093064235039)*r01*sj0))+(((3.42356107695108e-6)*cj0*r01))+(((0.0171178053847554)*pz*r02))+(((-3.31035610769511e-5)*r02*sj2))+(((((((0.00660534365853715)*r02*sj2))+((r02*sj2*(py*py)))+(((-0.0004)*cj0*pz*r01*sj2))+(((0.00468898479026236)*cj0*r01*sj2))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-1.0)*r00*sj0*(pz*pz)))+(((0.0004)*cj2*pz*r02))+(((0.00352814080569961)*cj2*r00*sj0))+(((-0.00352814080569961)*r00*sj0))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((1.22e-5)*cj2*r01*sj0))+(((-1.0)*r00*sj0*(py*py)))+(((-0.0004)*py*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.0004)*px*r00))+(((0.061)*py*r02*sj0*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*px*py*r01*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((-1.22e-5)*cj0*r00))+(((-1.22e-5)*r01*sj0))+(((1.22e-5)*cj0*cj2*r00))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.00321248192850613)*cj2*r02))+(((-0.061)*pz*r01*sj0*sj2))+(((-0.0004)*pz*r02))+(((0.00352814080569961)*cj0*r01))+(((-0.061)*cj0*pz*r00*sj2))+(((-0.00468898479026236)*r00*sj0*sj2))+(((0.061)*px*r01))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*cj0*px*py*r00))+(((-2.0)*py*pz*r01*sj2))+(((0.00321248192850613)*r02))+((cj0*r01*(pz*pz)))+((r02*sj2*(px*px)))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.061)*py*r00))+(((-0.00352814080569961)*cj0*cj2*r01))+(((-2.0)*cj0*py*pz*r02))+(((0.0004)*cj2*py*r01))+(((-1.0)*cj0*r01*(py*py)))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2))))*(IKcos(j1))))+(((1.44454137529863e-5)*cj2*r02))+(((-0.165517805384755)*pz*r00*sj0*sj2))+(((-3.42356107695108e-6)*cj0*cj2*r01))+(((-0.0380270687649317)*pz*r02*sj2))+(((-0.165517805384755)*cj0*py*r02*sj2))+(((-0.0722270687649317)*pz*r00*sj0))+(((-0.0380270687649317)*px*r00*sj2))+(((0.0722270687649317)*cj0*pz*r01))+(((-7.60541375298634e-6)*cj0*r01*sj2))+(((0.0722270687649317)*cj2*pz*r00*sj0))+(((-0.0722270687649317)*cj0*py*r02))+(((0.000522093064235039)*cj0*r00))+(((-0.0171178053847554)*cj2*px*r00))+(((-0.00115982559733042)*r01*sj0*sj2))+(((-1.44454137529863e-5)*r02))+(((-0.0380270687649317)*py*r01*sj2))+(((0.0722270687649317)*px*r02*sj0))+(((0.0171178053847554)*px*r00))+(((-0.00115982559733042)*cj0*r00*sj2)));
evalcond[2]=((((-0.00201549717576496)*cj0*cj2*r00))+(((-0.0660818746152446)*px*r00))+(((0.0823181253847554)*cj0*py*r02*sj2))+(((-0.153373051235068)*cj2*px*r02*sj0))+(((-0.187573051235068)*px*r00*sj2))+(((-0.0823181253847554)*px*r02*sj0*sj2))+(((3.75146102470137e-5)*r00*sj0*sj2))+(((-0.0660818746152446)*cj2*pz*r02))+(((3.06746102470137e-5)*cj2*r02))+(((-0.0660818746152446)*pz*r02))+(((-0.00201549717576496)*r01*sj0))+(((-0.0660818746152446)*cj2*px*r00))+(((-0.187573051235068)*py*r01*sj2))+(((-0.00201549717576496)*cj2*r01*sj0))+(((0.153373051235068)*cj0*py*r02))+(((-0.0660818746152446)*cj2*py*r01))+(((-1.32163749230489e-5)*cj0*cj2*r01))+(((-0.153373051235068)*cj0*cj2*pz*r01))+(((-3.75146102470137e-5)*cj0*r01*sj2))+(((0.0823181253847554)*pz*r00*sj0*sj2))+(((-1.32163749230489e-5)*cj0*r01))+(((-0.0660818746152446)*py*r01))+((((((r00*sj0*sj2*(pz*pz)))+(((-0.061)*cj2*py*r02*sj0))+(((-0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((0.061)*cj2*pz*r01*sj0))+(((0.0004)*py*r01*sj2))+(((-0.00698410177228939)*r00*sj0*sj2))+(((0.00766188684572804)*cj0*cj2*r01))+(((2.0)*px*pz*r00))+(((-1.0)*cj2*r02*(px*px)))+(((0.061)*cj0*cj2*pz*r00))+(((0.061)*cj0*pz*r00))+((cj2*r02*(pz*pz)))+((r00*sj0*sj2*(py*py)))+(((2.0)*cj2*px*pz*r00))+(((-0.00766188684572804)*r00*sj0))+(((0.061)*pz*r01*sj0))+(((-0.061)*px*r01*sj2))+(((-0.00708640792852615)*cj2*r02))+(((0.0004)*cj2*px*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((0.00766188684572804)*cj0*r01))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((0.0004)*px*r02*sj0))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r01))+(((-0.0004)*pz*r00*sj0))+(((-0.061)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((2.0)*cj0*px*py*r00*sj2))+(((-0.061)*py*r02*sj0))+(((0.0004)*pz*r02*sj2))+(((-0.00617842466851573)*r02*sj2))+(((-0.00766188684572804)*cj2*r00*sj0))+(((-0.0004)*cj0*py*r02))+(((-0.061)*cj0*px*r02))+(((0.0004)*px*r00*sj2))+(((0.0004)*cj0*pz*r01))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.00708640792852615)*r02))+(((1.22e-5)*r01*sj0*sj2))+(((-1.0)*r02*(px*px)))+(((0.061)*py*r00*sj2))+(((0.00698410177228939)*cj0*r01*sj2))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((0.0004)*cj0*cj2*pz*r01))+(((1.22e-5)*cj0*r00*sj2))+(((-0.0004)*cj2*pz*r00*sj0))+(((2.0)*cj0*py*pz*r02*sj2))+((r02*(pz*pz)))))*(IKsin(j1))))+(((1.32163749230489e-5)*cj2*r00*sj0))+(((3.06746102470137e-5)*r02))+(((0.153373051235068)*cj2*pz*r00*sj0))+(((-0.00201549717576496)*cj0*r00))+(((-0.153373051235068)*cj0*pz*r01))+((((((r02*sj2*(py*py)))+(((-0.0004)*cj0*pz*r01*sj2))+(((-0.00766188684572804)*cj2*r02))+(((0.061)*cj2*py*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((0.0004)*pz*r02))+(((0.0004)*cj2*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.00698402177228939)*r02*sj2))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((1.22e-5)*cj2*r01*sj0))+(((0.00708632792852615)*r00*sj0))+(((-0.00708632792852615)*cj0*r01))+(((0.0004)*cj2*px*r00))+(((0.0004)*cj0*py*r02*sj2))+(((0.00617842466851573)*r00*sj0*sj2))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.061)*py*r02*sj0*sj2))+(((-0.061)*cj2*px*r01))+(((-0.0004)*px*r02*sj0*sj2))+(((2.0)*cj0*cj2*py*pz*r02))+((cj2*r00*sj0*(py*py)))+(((1.22e-5)*cj0*cj2*r00))+(((-2.0)*cj2*px*py*r01*sj0))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.061)*cj0*px*r02*sj2))+(((-0.061)*pz*r01*sj0*sj2))+(((-0.00617842466851573)*cj0*r01*sj2))+(((-0.061)*cj0*pz*r00*sj2))+(((0.00708632792852615)*cj2*r00*sj0))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((2.0)*cj0*cj2*px*py*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((1.22e-5)*cj0*r00))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((-0.00766188684572804)*r02))+(((0.0004)*cj2*py*r01))+(((-0.00708632792852615)*cj0*cj2*r01))+(((-1.0)*cj2*r00*sj0*(px*px)))+((cj0*cj2*r01*(py*py)))+(((0.0004)*pz*r00*sj0*sj2))))*(IKcos(j1))))+(((1.32163749230489e-5)*r00*sj0))+(((0.153373051235068)*pz*r00*sj0))+(((-0.187573051235068)*pz*r02*sj2))+(((-0.153373051235068)*px*r02*sj0))+(((-0.00572097806266958)*cj0*r00*sj2))+(((-0.00572097806266958)*r01*sj0*sj2))+(((0.153373051235068)*cj0*cj2*py*r02))+(((-0.0823181253847554)*cj0*pz*r01*sj2))+(((1.64636250769511e-5)*r02*sj2)));
evalcond[3]=((((0.00572097806266958)*cj0*cj2*r00))+(((-0.187573051235068)*px*r00))+(((-0.153373051235068)*cj0*pz*r01*sj2))+(((0.187573051235068)*cj2*px*r00))+(((-0.0660818746152446)*py*r01*sj2))+(((-0.0823181253847554)*cj0*pz*r01))+(((-0.00201549717576496)*r01*sj0*sj2))+(((0.187573051235068)*cj2*pz*r02))+(((-0.0823181253847554)*cj2*pz*r00*sj0))+(((0.0823181253847554)*cj0*cj2*pz*r01))+(((-0.0660818746152446)*pz*r02*sj2))+(((-3.75146102470137e-5)*cj0*r01))+(((-0.0823181253847554)*px*r02*sj0))+(((0.187573051235068)*cj2*py*r01))+(((1.32163749230489e-5)*r00*sj0*sj2))+(((3.75146102470137e-5)*r00*sj0))+(((-0.187573051235068)*pz*r02))+(((-3.75146102470137e-5)*cj2*r00*sj0))+(((-0.153373051235068)*px*r02*sj0*sj2))+(((1.64636250769511e-5)*r02))+(((-1.32163749230489e-5)*cj0*r01*sj2))+(((((((-0.00617842466851573)*r02))+(((0.00617842466851573)*cj2*r02))+(((-1.22e-5)*cj2*r01*sj0))+(((-1.0)*cj0*cj2*r01*(py*py)))+(((0.0004)*cj0*pz*r01*sj2))+(((-2.0)*px*pz*r02*sj0))+(((2.0)*cj2*px*py*r01*sj0))+(((0.0004)*pz*r02))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.00766188684572804)*r00*sj0*sj2))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((0.0004)*px*r02*sj0*sj2))+(((0.00698410177228939)*cj2*r00*sj0))+(((-0.0004)*cj0*py*r02*sj2))+(((-0.0004)*cj2*py*r01))+(((-1.0)*cj2*r00*sj0*(pz*pz)))+((cj0*cj2*r01*(px*px)))+(((-0.0004)*pz*r00*sj0*sj2))+((cj0*cj2*r01*(pz*pz)))+(((-1.0)*r02*sj2*(py*py)))+(((-0.0004)*cj2*pz*r02))+((r02*sj2*(pz*pz)))+(((1.22e-5)*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-0.061)*px*r01))+(((2.0)*cj2*px*pz*r02*sj0))+(((-0.0004)*cj2*px*r00))+(((2.0)*py*pz*r01*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-0.00698410177228939)*cj0*cj2*r01))+(((0.061)*pz*r01*sj0*sj2))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((-0.061)*py*r02*sj0*sj2))+(((0.061)*py*r00))+(((-0.00708640792852615)*r02*sj2))+(((-1.0)*cj2*r00*sj0*(py*py)))+(((-2.0)*cj0*cj2*py*pz*r02))+(((0.0004)*px*r00))+(((0.00766188684572804)*cj0*r01*sj2))+(((1.22e-5)*cj0*r00))+((cj2*r00*sj0*(px*px)))+((cj0*r01*(py*py)))+(((0.0004)*py*r01))+(((-0.061)*cj2*py*r00))+(((0.00698410177228939)*cj0*r01))+(((2.0)*px*pz*r00*sj2))+(((0.061)*cj2*px*r01))+(((-2.0)*cj0*cj2*px*py*r00))+(((0.061)*cj0*pz*r00*sj2))+(((-0.00698410177228939)*r00*sj0))+(((-1.22e-5)*cj0*cj2*r00))+(((-0.061)*cj0*px*r02*sj2))))*(IKsin(j1))))+(((-1.64636250769511e-5)*cj2*r02))+(((-0.187573051235068)*py*r01))+(((-0.0823181253847554)*cj0*cj2*py*r02))+(((-0.00572097806266958)*cj0*r00))+(((-0.00572097806266958)*r01*sj0))+(((0.153373051235068)*pz*r00*sj0*sj2))+(((3.75146102470137e-5)*cj0*cj2*r01))+(((0.0823181253847554)*cj0*py*r02))+((((((r00*sj0*sj2*(pz*pz)))+(((-0.061)*cj2*py*r02*sj0))+(((0.0004)*cj0*py*r02))+(((-0.0004)*cj0*cj2*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-0.061)*cj0*pz*r00))+(((0.061)*cj2*pz*r01*sj0))+(((0.0004)*py*r01*sj2))+(((0.0004)*pz*r00*sj0))+(((-1.0)*cj2*r02*(px*px)))+(((0.061)*cj0*cj2*pz*r00))+(((-0.00766188684572804)*r02*sj2))+((r02*(py*py)))+((cj2*r02*(pz*pz)))+(((-0.061)*pz*r01*sj0))+((r00*sj0*sj2*(py*py)))+(((-0.00698402177228939)*r02))+((r02*(px*px)))+(((2.0)*cj2*px*pz*r00))+(((-0.061)*px*r01*sj2))+(((0.0004)*cj2*px*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((0.00698402177228939)*cj2*r02))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((0.00617842466851573)*r00*sj0))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((2.0)*cj2*py*pz*r01))+(((-0.00617842466851573)*cj2*r00*sj0))+(((-0.061)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.00708632792852615)*r00*sj0*sj2))+(((-0.00708632792852615)*cj0*r01*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-0.0004)*cj0*pz*r01))+(((-0.0004)*px*r02*sj0))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.0004)*pz*r02*sj2))+(((0.061)*cj0*px*r02))+(((0.0004)*px*r00*sj2))+(((-2.0)*px*py*r01*sj0*sj2))+(((1.22e-5)*r01*sj0*sj2))+(((0.061)*py*r00*sj2))+(((-0.00617842466851573)*cj0*r01))+(((-2.0)*py*pz*r01))+(((0.061)*py*r02*sj0))+(((0.00617842466851573)*cj0*cj2*r01))+(((0.0004)*cj0*cj2*pz*r01))+(((1.22e-5)*cj0*r00*sj2))+(((-0.0004)*cj2*pz*r00*sj0))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))))*(IKcos(j1))))+(((0.153373051235068)*cj0*py*r02*sj2))+(((-0.00201549717576496)*cj0*r00*sj2))+(((-0.0660818746152446)*px*r00*sj2))+(((0.0823181253847554)*pz*r00*sj0))+(((3.06746102470137e-5)*r02*sj2))+(((0.00572097806266958)*cj2*r01*sj0))+(((0.0823181253847554)*cj2*px*r02*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x233=(cj2*sj1);
IkReal x234=(px*sj0);
IkReal x235=(sj1*sj2);
IkReal x236=((20.2227832716915)*cj1);
IkReal x237=(cj1*sj2);
IkReal x238=(cj1*cj2);
IkReal x239=((5.00197984865329)*pz);
IkReal x240=((20.2227832716915)*pz);
IkReal x241=((20.2227832716915)*cj0*py);
IkReal x242=((5.00197984865329)*cj0*py);
if( IKabs(((-1.58606437417148)+(((0.00100039596973066)*x237))+((x233*x240))+(((-1.0)*cj2*x234*x236))+(((-0.00100039596973066)*x233))+(((5.00197984865329)*x233*x234))+((x237*x242))+(((-1.0)*x233*x242))+((x235*x239))+(((-20.2227832716915)*x234*x235))+(((-1.0)*pz*sj2*x236))+((cj0*cj2*py*x236))+((x238*x239))+(((-0.13852046070508)*cj2))+((x235*x241))+(((-5.00197984865329)*x234*x237))+(((-1.2446063639005)*sj2))+(((0.0040445566543383)*x235))+(((0.0040445566543383)*x238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0253373108241496)+((x237*x239))+(((-1.0)*x233*x239))+(((-0.0040445566543383)*x233))+(((-1.0)*sj2*x234*x236))+(((5.00197984865329)*x234*x238))+(((5.00197984865329)*x234*x235))+(((-0.00100039596973066)*x235))+(((-0.00100039596973066)*x238))+((cj2*pz*x236))+(((-1.0)*x233*x241))+(((1.2446063639005)*cj2))+(((-1.0)*x238*x242))+(((-1.0)*x235*x242))+(((-0.13852046070508)*sj2))+((cj0*py*sj2*x236))+(((20.2227832716915)*x233*x234))+((x235*x240))+(((0.0040445566543383)*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.58606437417148)+(((0.00100039596973066)*x237))+((x233*x240))+(((-1.0)*cj2*x234*x236))+(((-0.00100039596973066)*x233))+(((5.00197984865329)*x233*x234))+((x237*x242))+(((-1.0)*x233*x242))+((x235*x239))+(((-20.2227832716915)*x234*x235))+(((-1.0)*pz*sj2*x236))+((cj0*cj2*py*x236))+((x238*x239))+(((-0.13852046070508)*cj2))+((x235*x241))+(((-5.00197984865329)*x234*x237))+(((-1.2446063639005)*sj2))+(((0.0040445566543383)*x235))+(((0.0040445566543383)*x238))))+IKsqr(((0.0253373108241496)+((x237*x239))+(((-1.0)*x233*x239))+(((-0.0040445566543383)*x233))+(((-1.0)*sj2*x234*x236))+(((5.00197984865329)*x234*x238))+(((5.00197984865329)*x234*x235))+(((-0.00100039596973066)*x235))+(((-0.00100039596973066)*x238))+((cj2*pz*x236))+(((-1.0)*x233*x241))+(((1.2446063639005)*cj2))+(((-1.0)*x238*x242))+(((-1.0)*x235*x242))+(((-0.13852046070508)*sj2))+((cj0*py*sj2*x236))+(((20.2227832716915)*x233*x234))+((x235*x240))+(((0.0040445566543383)*x237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.58606437417148)+(((0.00100039596973066)*x237))+((x233*x240))+(((-1.0)*cj2*x234*x236))+(((-0.00100039596973066)*x233))+(((5.00197984865329)*x233*x234))+((x237*x242))+(((-1.0)*x233*x242))+((x235*x239))+(((-20.2227832716915)*x234*x235))+(((-1.0)*pz*sj2*x236))+((cj0*cj2*py*x236))+((x238*x239))+(((-0.13852046070508)*cj2))+((x235*x241))+(((-5.00197984865329)*x234*x237))+(((-1.2446063639005)*sj2))+(((0.0040445566543383)*x235))+(((0.0040445566543383)*x238))), ((0.0253373108241496)+((x237*x239))+(((-1.0)*x233*x239))+(((-0.0040445566543383)*x233))+(((-1.0)*sj2*x234*x236))+(((5.00197984865329)*x234*x238))+(((5.00197984865329)*x234*x235))+(((-0.00100039596973066)*x235))+(((-0.00100039596973066)*x238))+((cj2*pz*x236))+(((-1.0)*x233*x241))+(((1.2446063639005)*cj2))+(((-1.0)*x238*x242))+(((-1.0)*x235*x242))+(((-0.13852046070508)*sj2))+((cj0*py*sj2*x236))+(((20.2227832716915)*x233*x234))+((x235*x240))+(((0.0040445566543383)*x237))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x243=IKcos(j3);
IkReal x244=IKsin(j3);
IkReal x245=((0.707106781186548)*cj4);
IkReal x246=(cj0*sj1);
IkReal x247=(cj0*cj1);
IkReal x248=((1.0)*cj1);
IkReal x249=((0.01152581)*cj2);
IkReal x250=(sj2*x243);
IkReal x251=((1.0)*sj0*sj1);
IkReal x252=(sj2*x244);
IkReal x253=(cj2*x243);
IkReal x254=(cj2*x244);
IkReal x255=(x245*x250);
IkReal x256=(x245*x254);
IkReal x257=(x245*x252);
IkReal x258=(x245*x253);
IkReal x259=(x255+x256);
evalcond[0]=((-0.02079992)+(((-0.04659834)*x254))+(((-0.04659834)*x250))+(((-0.0742)*cj2))+(((0.0002)*cj1))+(((-0.01152581)*x252))+(((-0.0171)*sj2))+(((-1.0)*px*sj0*x248))+((py*x247))+((pz*sj1))+((x243*x249)));
evalcond[1]=((-0.05640003)+(((-1.0)*pz*x248))+(((0.01152581)*x250))+(((-0.04659834)*x252))+((x244*x249))+(((-0.0742)*sj2))+(((0.04659834)*x253))+((py*x246))+(((0.0002)*sj1))+(((-1.0)*px*x251))+(((0.0171)*cj2)));
evalcond[2]=((((-1.0)*r00*sj0*x248))+((r02*sj1))+x258+x259+((r01*x247))+(((-1.0)*x257)));
evalcond[3]=((((-1.0)*r00*x251))+x259+x257+(((-1.0)*r02*x248))+((r01*x246))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - daedalus (1bc8d3a3ca1f7936a5875967b234979d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
