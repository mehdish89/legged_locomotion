/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-08-03 15:48:53.759406
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.029062075)*x5);
x11=((0.707106781186548)*x5);
x12=((0.0171)*x0);
x13=((0.017536265)*x0);
x14=((0.707106781186548)*x6);
x15=((0.0742)*x4);
x16=((1.0)*x7);
x17=((0.029062075)*x6);
x18=((0.017536265)*x7);
x19=((1.0)*x4);
x20=((0.02079993)*x3);
x21=(x3*x4);
x22=(x2*x3);
x23=(x1*x7);
x24=(x0*x1);
x25=(x1*x2);
x26=(x1*x4);
x27=(x19*x3);
x28=(x13*x21);
x29=(x13*x25);
x30=(x18*x25);
x31=(x18*x21);
x32=((((-1.0)*x27))+x25);
x33=((((0.017536265)*x21))+(((-0.017536265)*x25)));
x34=((((-1.0)*x25))+x27);
x35=((((-1.0)*x22))+(((-1.0)*x1*x19)));
x36=((((0.017536265)*x26))+(((0.017536265)*x22)));
x37=(((x0*x21))+(((-1.0)*x2*x24)));
x38=((((-1.0)*x16*x21))+((x2*x23)));
x39=(((x22*x7))+((x23*x4)));
x40=(x13*(((((-1.0)*x22))+(((-1.0)*x26)))));
x41=(((x19*x24))+(((1.0)*x0*x22)));
x42=(x18*(((((-1.0)*x22))+(((-1.0)*x26)))));
x43=((-1.0)*x41);
x44=(x16*(((((-1.0)*x22))+(((-1.0)*x26)))));
IkReal x45=((1.0)*x10);
IkReal x46=((1.0)*x17);
eetrans[0]=((-0.0249)+(((-1.0)*x37*x45))+(((-1.0)*x37*x46))+(((-1.0)*x15*x24))+(((-1.0)*x0*x20))+(((-1.0)*x12*x21))+(((-1.0)*x41*x45))+(((0.0002)*x0))+(((-0.0742)*x0*x22))+(((-1.0)*x43*x46))+(((-0.05640003)*x24))+((x5*(((((-1.0)*x29))+x28))))+((x40*x6))+((x40*x5))+(((-0.0305)*x7))+((x12*x25))+((x6*(((((-1.0)*x28))+x29)))));
eetrans[1]=((((0.0171)*x2*x23))+(((-1.0)*x15*x23))+(((-0.0742)*x22*x7))+((x10*x38))+((x10*x44))+((x17*x39))+((x17*x38))+((x6*(((((-1.0)*x31))+x30))))+(((0.0002)*x7))+((x42*x5))+((x42*x6))+(((-0.05640003)*x23))+(((0.0305)*x0))+(((-0.0171)*x21*x7))+((x5*(((((-1.0)*x30))+x31))))+(((-1.0)*x20*x7)));
eetrans[2]=((0.0586)+(((-0.0742)*x25))+(((-0.0171)*x26))+(((-0.0171)*x22))+((x10*x34))+((x10*x35))+((x17*x35))+((x17*x32))+((x33*x5))+((x33*x6))+(((-0.02079993)*x1))+(((-1.0)*x36*x6))+(((0.05640003)*x3))+((x36*x5))+((x15*x3)));
eerot[0]=((((-1.0)*x16*x8))+((x9*((((x11*x41))+(((-1.0)*x14*x43))+((x14*x37))+(((-1.0)*x11*x37)))))));
eerot[1]=(((x0*x8))+((x9*(((((-1.0)*x14*x38))+((x11*x38))+((x14*x39))+(((-1.0)*x11*x44)))))));
eerot[2]=(x9*(((((-1.0)*x14*x35))+((x11*x35))+((x14*x32))+(((-1.0)*x11*x34)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j18,cj18,sj18,htj18,j18mul,j19,cj19,sj19,htj19,j19mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18,_ij19[2], _nj19;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0249)+px);
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.0586)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j15eval[2];
j15eval[0]=((px*px)+(py*py));
j15eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j15, j16, j17, j18, j19]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x49 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x49.valid){
continue;
}
IkReal x47=((1.0)*(x49.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x50=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x50.valid){
continue;
}
if( (((0.0305)*(x50.value))) < -1-IKFAST_SINCOS_THRESH || (((0.0305)*(x50.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x48=IKasin(((0.0305)*(x50.value)));
j15array[0]=((((-1.0)*x48))+(((-1.0)*x47)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x47))+x48);
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
sj19array[0]=((((-1.0)*cj15*r00))+(((-1.0)*r01*sj15)));
if( sj19array[0] >= -1-IKFAST_SINCOS_THRESH && sj19array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j19valid[0] = j19valid[1] = true;
    j19array[0] = IKasin(sj19array[0]);
    cj19array[0] = IKcos(j19array[0]);
    sj19array[1] = sj19array[0];
    j19array[1] = j19array[0] > 0 ? (IKPI-j19array[0]) : (-IKPI-j19array[0]);
    cj19array[1] = -cj19array[0];
}
else if( isnan(sj19array[0]) )
{
    // probably any value will work
    j19valid[0] = true;
    cj19array[0] = 1; sj19array[0] = 0; j19array[0] = 0;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x51=py*py;
IkReal x52=pz*pz;
IkReal x53=px*px;
IkReal x54=(pz*r02);
IkReal x55=(cj15*r01);
IkReal x56=((0.122)*r01);
IkReal x57=(r01*sj15);
IkReal x58=(cj15*r00);
IkReal x59=(r00*sj15);
IkReal x60=(py*r01);
IkReal x61=((0.122)*py);
IkReal x62=(px*r00);
IkReal x63=(px*r02);
IkReal x64=(cj15*py);
IkReal x65=(px*py);
IkReal x66=((0.163836210769511)*pz);
IkReal x67=((0.331835650769511)*pz);
IkReal x68=(r02*sj15);
IkReal x69=((0.244)*pz);
IkReal x70=((0.306746102470137)*pz);
IkReal x71=((0.330235650769511)*pz);
IkReal x72=((0.0016)*pz);
IkReal x73=((8.0)*pz);
IkReal x74=((0.244)*py);
IkReal x75=((0.165436210769511)*pz);
IkReal x76=(px*sj15);
IkReal x77=((0.144454137529863)*pz);
IkReal x78=((4.0)*pz);
IkReal x79=((0.00231965119466083)*x58);
IkReal x80=((0.0760541375298634)*x62);
IkReal x81=((0.0760541375298634)*x60);
IkReal x82=((0.00231965119466083)*x57);
IkReal x83=((0.0760541375298634)*x54);
IkReal x84=(px*x56);
IkReal x85=(r00*x61);
IkReal x86=((0.0016)*x54);
IkReal x87=((4.88e-5)*x57);
IkReal x88=((4.88e-5)*x58);
IkReal x89=((0.0016)*x62);
IkReal x90=(r00*x74);
IkReal x91=((0.0016)*x60);
IkReal x92=((0.244)*px*r01);
IkReal x93=((0.375146102470137)*x60);
IkReal x94=((0.0114419561253392)*x57);
IkReal x95=((0.375146102470137)*x54);
IkReal x96=((0.375146102470137)*x62);
IkReal x97=((0.0114419561253392)*x58);
IkReal x98=((4.0)*x52);
IkReal x99=((2.0)*x52);
IkReal x100=((4.0)*x51);
IkReal x101=((4.0)*x53);
IkReal x102=((2.0)*x51);
IkReal x103=((2.0)*x53);
IkReal x104=((0.122)*pz*x58);
IkReal x105=(x60*x78);
IkReal x106=(r02*x99);
IkReal x107=(pz*sj15*x56);
IkReal x108=(x62*x78);
IkReal x109=((0.122)*cj15*x63);
IkReal x110=(x61*x68);
IkReal x111=(r02*x102);
IkReal x112=(r02*x103);
IkReal x113=(x59*x70);
IkReal x114=((0.306746102470137)*r02*x64);
IkReal x115=((0.306746102470137)*sj15*x63);
IkReal x116=(x55*x70);
IkReal x117=((0.0016)*r02*x64);
IkReal x118=(r02*x101);
IkReal x119=(r02*x100);
IkReal x120=(x68*x74);
IkReal x121=((0.244)*cj15*x63);
IkReal x122=(x59*x72);
IkReal x123=(x62*x73);
IkReal x124=(x57*x69);
IkReal x125=(x60*x73);
IkReal x126=(x55*x72);
IkReal x127=(x58*x69);
IkReal x128=(r02*x98);
IkReal x129=((0.0016)*sj15*x63);
IkReal x130=((0.144454137529863)*sj15*x63);
IkReal x131=(x55*x77);
IkReal x132=(x59*x77);
IkReal x133=((0.144454137529863)*r02*x64);
IkReal x134=(x103*x55);
IkReal x135=(x103*x59);
IkReal x136=((4.0)*x57*x65);
IkReal x137=(x55*x99);
IkReal x138=((4.0)*x54*x76);
IkReal x139=((4.0)*x54*x64);
IkReal x140=(x59*x99);
IkReal x141=((4.0)*x58*x65);
IkReal x142=(x102*x55);
IkReal x143=(x102*x59);
IkReal x144=((8.0)*x54*x64);
IkReal x145=(x100*x59);
IkReal x146=((8.0)*x58*x65);
IkReal x147=(x100*x55);
IkReal x148=(x59*x98);
IkReal x149=((8.0)*x54*x76);
IkReal x150=(x101*x59);
IkReal x151=((8.0)*x57*x65);
IkReal x152=(x101*x55);
IkReal x153=(x55*x98);
IkReal x154=(x116+x115);
IkReal x155=(x131+x130);
IkReal x156=(x133+x132);
IkReal x157=(x113+x114);
IkReal x158=(x79+x82+x83+x80+x81);
IkReal x159=(x93+x95+x94+x97+x96);
IkReal x160=(x112+x111+x110+x109);
IkReal x161=(x108+x104+x105+x106+x107);
IkReal x162=(x122+x120+x121+x117+x119+x118);
IkReal x163=(x153+x152+x151+x150+x149+x92);
IkReal x164=(x140+x141+x142+x143+x139+x85);
IkReal x165=(x135+x134+x137+x136+x138+x84);
IkReal x166=(x126+x127+x124+x125+x123+x128+x129);
IkReal x167=(x144+x145+x146+x147+x148+x88+x89+x86+x87+x91+x90);
IkReal x168=((((-1.0)*x162))+(((-0.0283456290708292)*r02))+x166+(((-0.0306475535178342)*x59))+(((0.0306475535178342)*x55)));
IkReal x169=((((-0.0128499306031073)*x55))+(((-1.0)*x166))+(((0.0128499306031073)*x59))+(((0.0141128825380858)*r02))+x162);
IkReal x170=((((0.330235650769511)*sj15*x63))+(((0.0131444834972767)*r02))+(((-1.0)*x158))+(((-1.0)*x161))+(((-0.330235650769511)*r02*x64))+(((-1.0)*x59*x71))+(((-0.00936275951356012)*x59))+x160+((x55*x71))+(((0.00936275951356012)*x55)));
IkReal x171=((((-1.0)*x158))+(((-0.00939318116857207)*x55))+(((-1.0)*x160))+(((0.00939318116857207)*x59))+(((-0.0132768977575845)*r02))+(((-0.331835650769511)*r02*x64))+x161+(((-1.0)*x59*x67))+(((0.331835650769511)*sj15*x63))+((x55*x67)));
IkReal x172=(((x59*x75))+(((-0.165436210769511)*sj15*x63))+(((-1.0)*x55*x75))+(((-1.0)*x159))+(((-1.0)*x161))+x160+(((-0.0139351179487872)*r02))+(((0.0124318748060645)*x59))+(((0.165436210769511)*r02*x64))+(((-0.0124318748060645)*x55)));
IkReal x173=((((-1.0)*x159))+((x59*x66))+(((-1.0)*x160))+(((0.0122818163650764)*x55))+(((0.014000972433095)*r02))+(((0.163836210769511)*r02*x64))+(((-1.0)*x55*x66))+x161+(((-0.163836210769511)*sj15*x63))+(((-0.0122818163650764)*x59)));
IkReal x174=((((-1.0)*x163))+(((0.0264210612548612)*x59))+x167+(((-0.0264210612548612)*x55))+(((0.0187559406821322)*r02)));
IkReal x175=((((-1.0)*x163))+(((-0.0247136911711409)*r02))+x167+(((0.0279364103818822)*x55))+(((-0.0279364103818822)*x59)));
IkReal x176=((((-1.0)*x154))+(((-1.0)*x165))+(((-0.0141990872932607)*x55))+(((-0.0152624275384231)*r02))+(((-0.131363789230489)*x62))+(((-0.131363789230489)*x60))+(((-0.131363789230489)*x54))+x164+x157+(((0.0141990872932607)*x59))+(((-0.00400659557152992)*x57))+(((-0.00400659557152992)*x58)));
IkReal x177=((((-1.0)*x154))+(((-1.0)*x164))+(((0.0141462217775685)*x55))+(((-0.132963789230489)*x54))+x165+x157+(((-0.132963789230489)*x60))+(((-0.132963789230489)*x62))+(((0.0153851259794111)*r02))+(((-0.0141462217775685)*x59))+(((-0.00405539557152992)*x57))+(((-0.00405539557152992)*x58)));
IkReal x178=((((-1.0)*x156))+(((-0.00706312839919682)*x59))+(((-1.0)*x164))+x165+x155+(((0.0334356507695108)*x60))+(((0.0334356507695108)*x62))+(((0.0334356507695108)*x54))+(((0.00101978734847008)*x57))+(((0.00101978734847008)*x58))+(((0.00706312839919682)*x55))+(((0.00639607447404766)*r02)));
IkReal x179=((((-1.0)*x156))+(((-1.0)*x165))+(((-0.00704943413888901)*x55))+x164+x155+(((0.0350356507695108)*x54))+(((0.0350356507695108)*x62))+(((0.0350356507695108)*x60))+(((0.00106858734847008)*x58))+(((0.00106858734847008)*x57))+(((-0.00645385612905961)*r02))+(((0.00704943413888901)*x59)));
IkReal gconst40=x170;
IkReal gconst41=x174;
IkReal gconst42=x171;
IkReal gconst43=x176;
IkReal gconst44=x168;
IkReal gconst45=x177;
IkReal gconst46=x170;
IkReal gconst47=x174;
IkReal gconst48=x171;
IkReal gconst49=x176;
IkReal gconst50=x168;
IkReal gconst51=x177;
IkReal gconst52=x178;
IkReal gconst53=x169;
IkReal gconst54=x179;
IkReal gconst55=x172;
IkReal gconst56=x175;
IkReal gconst57=x173;
IkReal gconst58=x178;
IkReal gconst59=x169;
IkReal gconst60=x179;
IkReal gconst61=x172;
IkReal gconst62=x175;
IkReal gconst63=x173;
IkReal x180=(gconst42*gconst43);
IkReal x181=(gconst45*gconst46);
IkReal x182=((1.0)*gconst52);
IkReal x183=(gconst46*gconst57);
IkReal x184=(gconst41*gconst62);
IkReal x185=(gconst53*gconst57);
IkReal x186=(gconst50*gconst58);
IkReal x187=(gconst54*gconst55);
IkReal x188=((1.0)*gconst59);
IkReal x189=(gconst48*gconst61);
IkReal x190=(gconst40*gconst57);
IkReal x191=(gconst50*gconst53);
IkReal x192=(gconst43*gconst54);
IkReal x193=(gconst46*gconst51);
IkReal x194=(gconst42*gconst47);
IkReal x195=(gconst56*gconst61);
IkReal x196=(gconst41*gconst45);
IkReal x197=(gconst45*gconst53);
IkReal x198=((1.0)*gconst60);
IkReal x199=(gconst42*gconst55);
IkReal x200=(gconst44*gconst49);
IkReal x201=(gconst54*gconst59);
IkReal x202=((1.0)*gconst54);
IkReal x203=(gconst46*gconst62);
IkReal x204=((1.0)*gconst40);
IkReal x205=(gconst41*gconst50);
IkReal x206=(gconst46*gconst63);
IkReal x207=(gconst58*gconst63);
IkReal x208=(gconst58*gconst62);
IkReal x209=(gconst45*gconst52);
IkReal x210=(gconst48*gconst49);
IkReal x211=(gconst51*gconst58);
IkReal x212=(gconst49*gconst60);
IkReal x213=(gconst41*gconst57);
IkReal x214=(gconst42*gconst59);
IkReal x215=(gconst49*gconst56);
IkReal x216=(gconst44*gconst61);
IkReal x217=(gconst46*gconst50);
IkReal x218=(gconst52*gconst57);
IkReal x219=(gconst47*gconst54);
IkReal x220=(gconst40*gconst45);
IkReal x221=(gconst60*gconst61);
IkReal x222=(gconst53*gconst62);
IkReal x223=((1.0)*x210);
IkReal x224=((1.0)*gconst42*gconst56);
IkReal x225=((1.0)*gconst47*gconst61);
IkReal x226=((1.0)*gconst42*gconst44);
IkReal x227=((1.0)*gconst47*gconst49);
op[0]=((((-1.0)*gconst57*x182*x207))+((x187*x207))+((x195*x201))+(((-1.0)*gconst56*x202*x208))+((x185*x208))+((x218*x221))+(((-1.0)*gconst61*x185*x188))+(((-1.0)*gconst61*x187*x198)));
op[1]=((((-1.0)*gconst45*x182*x207))+(((-1.0)*x190*x207))+((x187*x206))+(((-1.0)*gconst61*x188*x197))+((x192*x207))+(((-1.0)*gconst61*x198*x199))+((x209*x221))+(((-1.0)*gconst56*x202*x203))+((x185*x186))+(((-1.0)*gconst49*x185*x188))+(((-1.0)*x208*x224))+((x197*x208))+(((-1.0)*x187*x189))+(((-1.0)*gconst57*x182*x211))+((x212*x218))+(((-1.0)*gconst56*x186*x202))+((x183*x222))+(((-1.0)*gconst49*x187*x198))+((x189*x218))+(((-1.0)*gconst61*x192*x198))+(((-1.0)*gconst44*x202*x208))+(((-1.0)*gconst63*x182*x183))+((x187*x211))+(((-1.0)*gconst61*x188*x213))+((x190*x221))+((x199*x207))+(((-1.0)*x185*x225))+((gconst57*gconst58*x184))+((x195*x219))+((x195*x214))+((x201*x216))+((x201*x215)));
op[2]=(((x190*x212))+(((-1.0)*gconst51*x182*x183))+(((-1.0)*gconst63*x183*x204))+(((-1.0)*gconst45*x182*x211))+(((-1.0)*x186*x224))+((x214*x216))+((x214*x215))+((x180*x207))+(((-1.0)*gconst49*x198*x199))+((x186*x197))+((x210*x218))+((x199*x211))+(((-1.0)*gconst61*x188*x196))+((x187*x193))+((x200*x201))+((x192*x206))+((x216*x219))+(((-1.0)*gconst49*x188*x197))+(((-1.0)*x213*x225))+((x215*x219))+((x189*x209))+(((-1.0)*x189*x199))+(((-1.0)*x189*x192))+((x189*x190))+(((-1.0)*x190*x211))+(((-1.0)*x208*x226))+((x209*x212))+((x220*x221))+(((-1.0)*gconst49*x192*x198))+((x194*x195))+(((-1.0)*gconst44*x186*x202))+(((-1.0)*gconst63*x181*x182))+((x186*x213))+(((-1.0)*x203*x224))+(((-1.0)*gconst56*x202*x217))+(((-1.0)*gconst61*x180*x198))+((x181*x222))+((gconst45*gconst58*x184))+(((-1.0)*gconst45*x204*x207))+(((-1.0)*gconst44*x202*x203))+((x192*x211))+(((-1.0)*gconst49*x188*x213))+((x183*x184))+((x199*x206))+(((-1.0)*x187*x223))+(((-1.0)*x185*x227))+((x183*x191))+(((-1.0)*x197*x225)));
op[3]=(((x190*x210))+((x189*x220))+(((-1.0)*x186*x226))+((x180*x206))+((x186*x196))+((x193*x199))+(((-1.0)*x192*x223))+(((-1.0)*gconst63*x181*x204))+(((-1.0)*gconst49*x188*x196))+(((-1.0)*x213*x227))+(((-1.0)*x180*x189))+(((-1.0)*x196*x225))+((x209*x210))+(((-1.0)*x199*x223))+((x192*x193))+(((-1.0)*gconst45*x204*x211))+(((-1.0)*gconst49*x180*x198))+(((-1.0)*x203*x226))+(((-1.0)*x217*x224))+((x180*x211))+((x183*x205))+((x181*x191))+(((-1.0)*gconst51*x181*x182))+((x194*x216))+((x194*x215))+(((-1.0)*gconst44*x202*x217))+((x200*x214))+((x200*x219))+(((-1.0)*gconst51*x183*x204))+((x181*x184))+(((-1.0)*x197*x227))+((x212*x220)));
op[4]=(((x210*x220))+(((-1.0)*gconst51*x181*x204))+((x194*x200))+((x180*x193))+(((-1.0)*x180*x223))+(((-1.0)*x196*x227))+(((-1.0)*x217*x226))+((x181*x205)));
polyroots4(op,zeror,numroots);
IkReal j17array[4], cj17array[4], sj17array[4], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[4]={true,true,true,true};
_nj17 = 4;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x228 = IKatan2WithCheck(IkReal(((((((((-3.06746102470137e-5)*cj17*r02))+(((-0.0823181053847554)*cj15*py*r02*sj17))+(((0.153373051235068)*px*r02*sj15))+(((-0.153373051235068)*pz*r00*sj15))+(((3.75146102470137e-5)*cj15*r01*sj17))+(((0.0660818946152446)*py*r01))+(((-0.153373051235068)*cj15*py*r02))+(((-3.06746102470137e-5)*r02))+(((0.0660818946152446)*pz*r02))+(((-3.75146102470137e-5)*r00*sj15*sj17))+(((0.187573051235068)*px*r00*sj17))+(((-0.153373051235068)*cj15*cj17*py*r02))+(((-1.32163789230489e-5)*cj17*r00*sj15))+(((0.0660818946152446)*px*r00))+(((0.0660818946152446)*cj17*py*r01))+(((0.00572097806266958)*cj15*r00*sj17))+(((-1.64636210769511e-5)*r02*sj17))+(((0.0823181053847554)*px*r02*sj15*sj17))+(((0.0660818946152446)*cj17*px*r00))+(((0.00572097806266958)*r01*sj15*sj17))+(((0.0660818946152446)*cj17*pz*r02))+(((0.00201549778576496)*cj17*r01*sj15))+(((0.153373051235068)*cj15*cj17*pz*r01))+(((0.00201549778576496)*cj15*r00))+(((-0.153373051235068)*cj17*pz*r00*sj15))+(((0.187573051235068)*py*r01*sj17))+(((-1.32163789230489e-5)*r00*sj15))+(((0.00201549778576496)*cj15*cj17*r00))+(((0.00201549778576496)*r01*sj15))+(((1.32163789230489e-5)*cj15*cj17*r01))+(((0.0823181053847554)*cj15*pz*r01*sj17))+(((0.187573051235068)*pz*r02*sj17))+(((0.153373051235068)*cj15*pz*r01))+(((1.32163789230489e-5)*cj15*r01))+(((0.153373051235068)*cj17*px*r02*sj15))+(((-0.0823181053847554)*pz*r00*sj15*sj17))))*(((((-0.0004)*cj15*cj17*pz*r01))+(((0.061)*cj17*py*r02*sj15))+(((-1.22e-5)*r01*sj15*sj17))+(((0.061)*cj15*px*r02))+(((-2.0)*cj15*px*py*r00*sj17))+(((0.00660534531371531)*r02))+(((0.061)*py*r02*sj15))+(((-0.0004)*px*r00*sj17))+(((0.00352814063452146)*cj15*r01*sj17))+(((0.00468898517053305)*cj15*cj17*r01))+(((0.0004)*cj15*py*r02))+(((-0.061)*py*r00*sj17))+(((-0.0004)*cj15*pz*r01))+((r00*sj15*sj17*(px*px)))+(((-2.0)*cj17*px*pz*r00))+(((-0.0004)*px*r02*sj15))+(((0.00660534531371531)*cj17*r02))+(((0.00321248265077682)*r02*sj17))+(((-0.061)*cj15*cj17*pz*r00))+((r02*(py*py)))+(((-0.061)*pz*r01*sj15))+((r02*(px*px)))+(((-2.0)*cj17*py*pz*r01))+((cj15*r01*sj17*(px*px)))+(((-0.061)*cj17*pz*r01*sj15))+(((-1.0)*r00*sj15*sj17*(pz*pz)))+(((-0.0004)*py*r01*sj17))+(((-0.0004)*pz*r02*sj17))+(((-1.0)*cj17*r02*(pz*pz)))+(((-0.061)*cj15*pz*r00))+(((2.0)*px*pz*r02*sj15*sj17))+(((0.0004)*cj17*pz*r00*sj15))+(((-0.00468898517053305)*r00*sj15))+(((0.0004)*pz*r00*sj15))+(((-0.0004)*cj17*px*r02*sj15))+((cj17*r02*(py*py)))+(((0.00468898517053305)*cj15*r01))+(((-2.0)*cj15*py*pz*r02*sj17))+(((0.061)*cj15*cj17*px*r02))+(((-0.00352814063452146)*r00*sj15*sj17))+(((-2.0)*px*pz*r00))+(((0.061)*px*r01*sj17))+(((-1.0)*cj15*r01*sj17*(py*py)))+((cj15*r01*sj17*(pz*pz)))+(((-1.0)*r00*sj15*sj17*(py*py)))+(((-1.22e-5)*cj15*r00*sj17))+(((-0.00468898517053305)*cj17*r00*sj15))+((cj17*r02*(px*px)))+(((-2.0)*py*pz*r01))+(((0.0004)*cj15*cj17*py*r02))+(((2.0)*px*py*r01*sj15*sj17))+(((-1.0)*r02*(pz*pz)))))))+(((((((-0.0380270687649317)*px*r00))+(((-0.0380270687649317)*cj17*py*r01))+(((0.165517825384755)*cj15*cj17*pz*r01))+(((-7.60541375298634e-6)*cj15*cj17*r01))+(((0.0171178253847554)*pz*r02*sj17))+(((-0.165517825384755)*pz*r00*sj15))+(((0.0171178253847554)*py*r01*sj17))+(((-3.31035650769511e-5)*r02))+(((3.42356507695108e-6)*cj15*r01*sj17))+(((-3.31035650769511e-5)*cj17*r02))+(((0.165517825384755)*cj15*pz*r01))+(((0.0171178253847554)*px*r00*sj17))+(((0.000522093674235039)*cj15*r00*sj17))+(((-1.44454137529863e-5)*r02*sj17))+(((0.165517825384755)*cj17*px*r02*sj15))+(((-0.0722270687649317)*cj15*py*r02*sj17))+(((-0.0380270687649317)*py*r01))+(((-0.0380270687649317)*cj17*px*r00))+(((7.60541375298634e-6)*r00*sj15))+(((-0.00115982559733042)*cj17*r01*sj15))+(((-0.00115982559733042)*r01*sj15))+(((-0.165517825384755)*cj15*cj17*py*r02))+(((0.0722270687649317)*cj15*pz*r01*sj17))+(((0.000522093674235039)*r01*sj15*sj17))+(((-7.60541375298634e-6)*cj15*r01))+(((-0.165517825384755)*cj15*py*r02))+(((-0.0380270687649317)*pz*r02))+(((-0.00115982559733042)*cj15*r00))+(((-0.00115982559733042)*cj15*cj17*r00))+(((-0.165517825384755)*cj17*pz*r00*sj15))+(((-3.42356507695108e-6)*r00*sj15*sj17))+(((7.60541375298634e-6)*cj17*r00*sj15))+(((-0.0722270687649317)*pz*r00*sj15*sj17))+(((0.165517825384755)*px*r02*sj15))+(((-0.0380270687649317)*cj17*pz*r02))+(((0.0722270687649317)*px*r02*sj15*sj17))))*(((((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((-0.00617842279278522)*cj15*r01*sj17))+(((-0.00766188837945855)*r02))+(((0.0004)*pz*r02))+(((2.0)*cj15*py*pz*r02))+(((0.00708632726770731)*cj17*r00*sj15))+(((0.0004)*cj17*pz*r02))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r02*sj17*(py*py)))+((r00*sj15*(py*py)))+(((-0.00766188837945855)*cj17*r02))+(((-2.0)*py*pz*r01*sj17))+(((-1.0)*cj15*r01*(px*px)))+(((0.0004)*cj15*py*r02*sj17))+(((-0.061)*pz*r01*sj15*sj17))+(((-1.0)*r00*sj15*(px*px)))+(((-0.0004)*cj15*pz*r01*sj17))+(((2.0)*cj15*px*py*r00))+(((1.22e-5)*cj17*r01*sj15))+(((0.061)*cj15*px*r02*sj17))+(((-2.0)*px*pz*r00*sj17))+(((-0.061)*px*r01))+((r02*sj17*(px*px)))+(((-0.00708632726770731)*cj15*r01))+(((-2.0)*px*py*r01*sj15))+(((-1.0)*r02*sj17*(pz*pz)))+((cj15*r01*(py*py)))+((cj17*r00*sj15*(pz*pz)))+(((0.00708632726770731)*r00*sj15))+(((-0.00698402259547054)*r02*sj17))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((-0.00708632726770731)*cj15*cj17*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+(((0.00617842279278522)*r00*sj15*sj17))+((r00*sj15*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00)))))))),IkReal(((((((((0.0380270687649317)*cj17*px*r00))+(((0.0380270687649317)*pz*r02))+(((0.00115982559733042)*cj17*r01*sj15))+(((3.31035650769511e-5)*cj17*r02))+(((0.0380270687649317)*py*r01))+(((0.165517825384755)*cj17*pz*r00*sj15))+(((-0.165517825384755)*px*r02*sj15))+(((0.00115982559733042)*cj15*r00))+(((0.165517825384755)*cj15*py*r02))+(((-0.000522093674235039)*r01*sj15*sj17))+(((7.60541375298634e-6)*cj15*r01))+(((0.0722270687649317)*cj15*py*r02*sj17))+(((-0.0722270687649317)*px*r02*sj15*sj17))+(((-0.000522093674235039)*cj15*r00*sj17))+(((0.00115982559733042)*r01*sj15))+(((-7.60541375298634e-6)*cj17*r00*sj15))+(((-0.0171178253847554)*pz*r02*sj17))+(((0.00115982559733042)*cj15*cj17*r00))+(((3.31035650769511e-5)*r02))+(((0.0380270687649317)*cj17*py*r01))+(((3.42356507695108e-6)*r00*sj15*sj17))+(((-0.165517825384755)*cj15*pz*r01))+(((-0.0171178253847554)*py*r01*sj17))+(((-0.165517825384755)*cj17*px*r02*sj15))+(((0.0722270687649317)*pz*r00*sj15*sj17))+(((-7.60541375298634e-6)*r00*sj15))+(((0.0380270687649317)*px*r00))+(((0.165517825384755)*cj15*cj17*py*r02))+(((1.44454137529863e-5)*r02*sj17))+(((-0.0171178253847554)*px*r00*sj17))+(((0.0380270687649317)*cj17*pz*r02))+(((-0.165517825384755)*cj15*cj17*pz*r01))+(((7.60541375298634e-6)*cj15*cj17*r01))+(((0.165517825384755)*pz*r00*sj15))+(((-0.0722270687649317)*cj15*pz*r01*sj17))+(((-3.42356507695108e-6)*cj15*r01*sj17))))*(((((-1.0)*cj17*r02*(px*px)))+(((0.0004)*px*r00*sj17))+(((0.061)*pz*r01*sj15))+(((-0.0004)*cj17*pz*r00*sj15))+(((-0.0004)*cj15*cj17*py*r02))+(((0.00766188837945855)*cj15*cj17*r01))+(((2.0)*cj15*px*py*r00*sj17))+(((-0.00617842279278522)*r02*sj17))+(((-0.061)*cj15*px*r02))+(((0.061)*cj15*pz*r00))+(((-2.0)*px*py*r01*sj15*sj17))+(((0.0004)*cj15*pz*r01))+(((-1.0)*cj17*r02*(py*py)))+(((2.0)*px*pz*r00))+(((-0.00708640726770731)*cj17*r02))+(((2.0)*cj15*py*pz*r02*sj17))+(((2.0)*cj17*py*pz*r01))+(((0.061)*cj15*cj17*pz*r00))+(((-1.0)*cj15*r01*sj17*(pz*pz)))+(((-0.00698410259547054)*r00*sj15*sj17))+(((0.0004)*py*r01*sj17))+(((-0.0004)*cj15*py*r02))+(((0.0004)*cj17*px*r02*sj15))+(((-0.061)*py*r02*sj15))+(((-1.0)*cj15*r01*sj17*(px*px)))+((cj17*r02*(pz*pz)))+(((0.061)*py*r00*sj17))+(((0.0004)*px*r02*sj15))+(((-0.061)*cj17*py*r02*sj15))+(((0.0004)*cj15*cj17*pz*r01))+(((-0.061)*px*r01*sj17))+((r00*sj15*sj17*(py*py)))+(((0.0004)*pz*r02*sj17))+(((0.061)*cj17*pz*r01*sj15))+((r00*sj15*sj17*(pz*pz)))+(((-0.00708640726770731)*r02))+(((-0.0004)*pz*r00*sj15))+(((1.22e-5)*r01*sj15*sj17))+((cj15*r01*sj17*(py*py)))+(((-1.0)*r00*sj15*sj17*(px*px)))+(((2.0)*cj17*px*pz*r00))+(((1.22e-5)*cj15*r00*sj17))+(((-0.00766188837945855)*cj17*r00*sj15))+(((0.00698410259547054)*cj15*r01*sj17))+(((-1.0)*r02*(px*px)))+(((-0.00766188837945855)*r00*sj15))+(((2.0)*py*pz*r01))+(((-0.061)*cj15*cj17*px*r02))+(((-1.0)*r02*(py*py)))+(((0.00766188837945855)*cj15*r01))+(((-2.0)*px*pz*r02*sj15*sj17))+((r02*(pz*pz)))))))+(((((((-0.0660818946152446)*py*r01))+(((-3.75146102470137e-5)*cj15*r01*sj17))+(((-0.00572097806266958)*cj15*r00*sj17))+(((1.32163789230489e-5)*r00*sj15))+(((3.06746102470137e-5)*cj17*r02))+(((-0.0660818946152446)*cj17*px*r00))+(((-0.187573051235068)*py*r01*sj17))+(((-0.153373051235068)*cj15*cj17*pz*r01))+(((-0.00201549778576496)*cj15*cj17*r00))+(((-0.00572097806266958)*r01*sj15*sj17))+(((3.75146102470137e-5)*r00*sj15*sj17))+(((1.64636210769511e-5)*r02*sj17))+(((-0.187573051235068)*pz*r02*sj17))+(((-0.153373051235068)*cj17*px*r02*sj15))+(((-0.0823181053847554)*cj15*pz*r01*sj17))+(((-0.0660818946152446)*cj17*pz*r02))+(((-0.00201549778576496)*cj17*r01*sj15))+(((0.153373051235068)*cj15*cj17*py*r02))+(((-0.0660818946152446)*cj17*py*r01))+(((1.32163789230489e-5)*cj17*r00*sj15))+(((0.153373051235068)*cj15*py*r02))+(((-1.32163789230489e-5)*cj15*r01))+(((3.06746102470137e-5)*r02))+(((0.0823181053847554)*cj15*py*r02*sj17))+(((-0.00201549778576496)*r01*sj15))+(((-0.153373051235068)*px*r02*sj15))+(((0.153373051235068)*cj17*pz*r00*sj15))+(((0.153373051235068)*pz*r00*sj15))+(((-0.153373051235068)*cj15*pz*r01))+(((-0.0660818946152446)*px*r00))+(((-0.00201549778576496)*cj15*r00))+(((-1.32163789230489e-5)*cj15*cj17*r01))+(((-0.187573051235068)*px*r00*sj17))+(((-0.0660818946152446)*pz*r02))+(((-0.0823181053847554)*px*r02*sj15*sj17))+(((0.0823181053847554)*pz*r00*sj15*sj17))))*(((((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((0.0004)*pz*r02))+(((2.0)*cj15*py*pz*r02))+(((0.0004)*cj17*pz*r02))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r02*sj17*(py*py)))+((r00*sj15*(py*py)))+(((-2.0)*py*pz*r01*sj17))+(((-1.0)*cj15*r01*(px*px)))+(((0.0004)*cj15*py*r02*sj17))+(((-0.061)*pz*r01*sj15*sj17))+(((-1.0)*r00*sj15*(px*px)))+(((0.00660526531371531)*r00*sj15))+(((-0.0004)*cj15*pz*r01*sj17))+(((2.0)*cj15*px*py*r00))+(((0.00468898517053305)*r02))+(((1.22e-5)*cj17*r01*sj15))+(((0.00352822063452146)*r02*sj17))+(((0.061)*cj15*px*r02*sj17))+(((-0.00660526531371531)*cj15*r01))+(((-0.00321248265077682)*cj15*r01*sj17))+(((-2.0)*px*pz*r00*sj17))+(((-0.061)*px*r01))+((r02*sj17*(px*px)))+(((-2.0)*px*py*r01*sj15))+(((-1.0)*r02*sj17*(pz*pz)))+(((0.00468898517053305)*cj17*r02))+((cj15*r01*(py*py)))+((cj17*r00*sj15*(pz*pz)))+(((0.00660526531371531)*cj17*r00*sj15))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.00660526531371531)*cj15*cj17*r01))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((0.00321248265077682)*r00*sj15*sj17))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+((r00*sj15*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x228.valid){
continue;
}
CheckValue<IkReal> x229=IKPowWithIntegerCheck(IKsign(((((((((-1.0)*cj17*r02*(px*px)))+(((0.0004)*px*r00*sj17))+(((0.061)*pz*r01*sj15))+(((-0.0004)*cj17*pz*r00*sj15))+(((-0.0004)*cj15*cj17*py*r02))+(((0.00766188837945855)*cj15*cj17*r01))+(((2.0)*cj15*px*py*r00*sj17))+(((-0.00617842279278522)*r02*sj17))+(((-0.061)*cj15*px*r02))+(((0.061)*cj15*pz*r00))+(((-2.0)*px*py*r01*sj15*sj17))+(((0.0004)*cj15*pz*r01))+(((-1.0)*cj17*r02*(py*py)))+(((2.0)*px*pz*r00))+(((-0.00708640726770731)*cj17*r02))+(((2.0)*cj15*py*pz*r02*sj17))+(((2.0)*cj17*py*pz*r01))+(((0.061)*cj15*cj17*pz*r00))+(((-1.0)*cj15*r01*sj17*(pz*pz)))+(((-0.00698410259547054)*r00*sj15*sj17))+(((0.0004)*py*r01*sj17))+(((-0.0004)*cj15*py*r02))+(((0.0004)*cj17*px*r02*sj15))+(((-0.061)*py*r02*sj15))+(((-1.0)*cj15*r01*sj17*(px*px)))+((cj17*r02*(pz*pz)))+(((0.061)*py*r00*sj17))+(((0.0004)*px*r02*sj15))+(((-0.061)*cj17*py*r02*sj15))+(((0.0004)*cj15*cj17*pz*r01))+(((-0.061)*px*r01*sj17))+((r00*sj15*sj17*(py*py)))+(((0.0004)*pz*r02*sj17))+(((0.061)*cj17*pz*r01*sj15))+((r00*sj15*sj17*(pz*pz)))+(((-0.00708640726770731)*r02))+(((-0.0004)*pz*r00*sj15))+(((1.22e-5)*r01*sj15*sj17))+((cj15*r01*sj17*(py*py)))+(((-1.0)*r00*sj15*sj17*(px*px)))+(((2.0)*cj17*px*pz*r00))+(((1.22e-5)*cj15*r00*sj17))+(((-0.00766188837945855)*cj17*r00*sj15))+(((0.00698410259547054)*cj15*r01*sj17))+(((-1.0)*r02*(px*px)))+(((-0.00766188837945855)*r00*sj15))+(((2.0)*py*pz*r01))+(((-0.061)*cj15*cj17*px*r02))+(((-1.0)*r02*(py*py)))+(((0.00766188837945855)*cj15*r01))+(((-2.0)*px*pz*r02*sj15*sj17))+((r02*(pz*pz)))))*(((((-0.0004)*cj15*cj17*pz*r01))+(((0.061)*cj17*py*r02*sj15))+(((-1.22e-5)*r01*sj15*sj17))+(((0.061)*cj15*px*r02))+(((-2.0)*cj15*px*py*r00*sj17))+(((0.00660534531371531)*r02))+(((0.061)*py*r02*sj15))+(((-0.0004)*px*r00*sj17))+(((0.00352814063452146)*cj15*r01*sj17))+(((0.00468898517053305)*cj15*cj17*r01))+(((0.0004)*cj15*py*r02))+(((-0.061)*py*r00*sj17))+(((-0.0004)*cj15*pz*r01))+((r00*sj15*sj17*(px*px)))+(((-2.0)*cj17*px*pz*r00))+(((-0.0004)*px*r02*sj15))+(((0.00660534531371531)*cj17*r02))+(((0.00321248265077682)*r02*sj17))+(((-0.061)*cj15*cj17*pz*r00))+((r02*(py*py)))+(((-0.061)*pz*r01*sj15))+((r02*(px*px)))+(((-2.0)*cj17*py*pz*r01))+((cj15*r01*sj17*(px*px)))+(((-0.061)*cj17*pz*r01*sj15))+(((-1.0)*r00*sj15*sj17*(pz*pz)))+(((-0.0004)*py*r01*sj17))+(((-0.0004)*pz*r02*sj17))+(((-1.0)*cj17*r02*(pz*pz)))+(((-0.061)*cj15*pz*r00))+(((2.0)*px*pz*r02*sj15*sj17))+(((0.0004)*cj17*pz*r00*sj15))+(((-0.00468898517053305)*r00*sj15))+(((0.0004)*pz*r00*sj15))+(((-0.0004)*cj17*px*r02*sj15))+((cj17*r02*(py*py)))+(((0.00468898517053305)*cj15*r01))+(((-2.0)*cj15*py*pz*r02*sj17))+(((0.061)*cj15*cj17*px*r02))+(((-0.00352814063452146)*r00*sj15*sj17))+(((-2.0)*px*pz*r00))+(((0.061)*px*r01*sj17))+(((-1.0)*cj15*r01*sj17*(py*py)))+((cj15*r01*sj17*(pz*pz)))+(((-1.0)*r00*sj15*sj17*(py*py)))+(((-1.22e-5)*cj15*r00*sj17))+(((-0.00468898517053305)*cj17*r00*sj15))+((cj17*r02*(px*px)))+(((-2.0)*py*pz*r01))+(((0.0004)*cj15*cj17*py*r02))+(((2.0)*px*py*r01*sj15*sj17))+(((-1.0)*r02*(pz*pz)))))))+(((((((-1.22e-5)*cj15*r00))+(((-1.0)*cj17*r00*sj15*(pz*pz)))+(((-1.0)*cj15*r01*(py*py)))+(((0.00660526531371531)*cj15*r01))+(((1.0)*cj15*cj17*r01*(pz*pz)))+(((-0.00468898517053305)*r02))+(((-0.0004)*cj17*px*r00))+(((0.00660526531371531)*cj15*cj17*r01))+(((-1.22e-5)*cj15*cj17*r00))+(((-2.0)*cj15*px*py*r00))+(((2.0)*px*py*r01*sj15))+(((-1.0)*cj17*r00*sj15*(py*py)))+(((1.0)*r02*sj17*(pz*pz)))+(((1.0)*cj17*r00*sj15*(px*px)))+(((-0.0004)*pz*r00*sj15*sj17))+(((-1.0)*cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*px*r02*sj17))+(((-0.0004)*py*r01))+(((-0.00660526531371531)*r00*sj15))+(((0.061)*cj15*pz*r00*sj17))+(((0.0004)*px*r02*sj15*sj17))+(((-0.0004)*px*r00))+(((0.00321248265077682)*cj15*r01*sj17))+(((1.0)*cj15*cj17*r01*(px*px)))+(((-1.0)*r00*sj15*(pz*pz)))+(((-0.0004)*cj17*py*r01))+(((2.0)*cj17*px*pz*r02*sj15))+(((-1.0)*r00*sj15*(py*py)))+(((-0.00321248265077682)*r00*sj15*sj17))+(((-0.00352822063452146)*r02*sj17))+(((-2.0)*cj15*cj17*px*py*r00))+(((-0.0004)*pz*r02))+(((-0.0004)*cj17*pz*r02))+(((1.0)*cj15*r01*(pz*pz)))+(((-1.22e-5)*r01*sj15))+(((1.0)*cj15*r01*(px*px)))+(((-1.0)*r02*sj17*(py*py)))+(((-1.22e-5)*cj17*r01*sj15))+(((0.061)*px*r01))+(((2.0)*py*pz*r01*sj17))+(((2.0)*px*pz*r02*sj15))+(((-0.00468898517053305)*cj17*r02))+(((2.0)*cj17*px*py*r01*sj15))+(((-0.00660526531371531)*cj17*r00*sj15))+(((0.061)*cj17*px*r01))+(((-0.061)*py*r00))+(((-0.061)*py*r02*sj15*sj17))+(((-2.0)*cj15*cj17*py*pz*r02))+(((2.0)*px*pz*r00*sj17))+(((-2.0)*cj15*py*pz*r02))+(((-1.0)*r02*sj17*(px*px)))+(((1.0)*r00*sj15*(px*px)))+(((0.0004)*cj15*pz*r01*sj17))+(((-0.0004)*cj15*py*r02*sj17))+(((-0.061)*cj17*py*r00))+(((0.061)*pz*r01*sj15*sj17))))*(((((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((-0.00617842279278522)*cj15*r01*sj17))+(((-0.00766188837945855)*r02))+(((0.0004)*pz*r02))+(((2.0)*cj15*py*pz*r02))+(((0.00708632726770731)*cj17*r00*sj15))+(((0.0004)*cj17*pz*r02))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r02*sj17*(py*py)))+((r00*sj15*(py*py)))+(((-0.00766188837945855)*cj17*r02))+(((-2.0)*py*pz*r01*sj17))+(((-1.0)*cj15*r01*(px*px)))+(((0.0004)*cj15*py*r02*sj17))+(((-0.061)*pz*r01*sj15*sj17))+(((-1.0)*r00*sj15*(px*px)))+(((-0.0004)*cj15*pz*r01*sj17))+(((2.0)*cj15*px*py*r00))+(((1.22e-5)*cj17*r01*sj15))+(((0.061)*cj15*px*r02*sj17))+(((-2.0)*px*pz*r00*sj17))+(((-0.061)*px*r01))+((r02*sj17*(px*px)))+(((-0.00708632726770731)*cj15*r01))+(((-2.0)*px*py*r01*sj15))+(((-1.0)*r02*sj17*(pz*pz)))+((cj15*r01*(py*py)))+((cj17*r00*sj15*(pz*pz)))+(((0.00708632726770731)*r00*sj15))+(((-0.00698402259547054)*r02*sj17))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((-0.00708632726770731)*cj15*cj17*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+(((0.00617842279278522)*r00*sj15*sj17))+((r00*sj15*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00)))))))),-1);
if(!x229.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x228.value)+(((1.5707963267949)*(x229.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
evalcond[0]=((((-0.0380270687649317)*px*r00))+(((-0.0380270687649317)*cj17*py*r01))+(((0.165517825384755)*cj15*cj17*pz*r01))+(((-7.60541375298634e-6)*cj15*cj17*r01))+(((0.0171178253847554)*pz*r02*sj17))+(((-0.165517825384755)*pz*r00*sj15))+(((0.0171178253847554)*py*r01*sj17))+(((-3.31035650769511e-5)*r02))+(((3.42356507695108e-6)*cj15*r01*sj17))+(((-3.31035650769511e-5)*cj17*r02))+(((0.165517825384755)*cj15*pz*r01))+(((0.0171178253847554)*px*r00*sj17))+(((0.000522093674235039)*cj15*r00*sj17))+(((-1.44454137529863e-5)*r02*sj17))+(((0.165517825384755)*cj17*px*r02*sj15))+(((-0.0722270687649317)*cj15*py*r02*sj17))+(((-0.0380270687649317)*py*r01))+(((-0.0380270687649317)*cj17*px*r00))+(((7.60541375298634e-6)*r00*sj15))+(((-0.00115982559733042)*cj17*r01*sj15))+(((-0.00115982559733042)*r01*sj15))+(((-0.165517825384755)*cj15*cj17*py*r02))+(((((((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((0.0004)*pz*r02))+(((2.0)*cj15*py*pz*r02))+(((0.0004)*cj17*pz*r02))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r02*sj17*(py*py)))+((r00*sj15*(py*py)))+(((-2.0)*py*pz*r01*sj17))+(((-1.0)*cj15*r01*(px*px)))+(((0.0004)*cj15*py*r02*sj17))+(((-0.061)*pz*r01*sj15*sj17))+(((-1.0)*r00*sj15*(px*px)))+(((0.00660526531371531)*r00*sj15))+(((-0.0004)*cj15*pz*r01*sj17))+(((2.0)*cj15*px*py*r00))+(((0.00468898517053305)*r02))+(((1.22e-5)*cj17*r01*sj15))+(((0.00352822063452146)*r02*sj17))+(((0.061)*cj15*px*r02*sj17))+(((-0.00660526531371531)*cj15*r01))+(((-0.00321248265077682)*cj15*r01*sj17))+(((-2.0)*px*pz*r00*sj17))+(((-0.061)*px*r01))+((r02*sj17*(px*px)))+(((-2.0)*px*py*r01*sj15))+(((-1.0)*r02*sj17*(pz*pz)))+(((0.00468898517053305)*cj17*r02))+((cj15*r01*(py*py)))+((cj17*r00*sj15*(pz*pz)))+(((0.00660526531371531)*cj17*r00*sj15))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.00660526531371531)*cj15*cj17*r01))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((0.00321248265077682)*r00*sj15*sj17))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+((r00*sj15*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00))))*(IKsin(j16))))+(((0.0722270687649317)*cj15*pz*r01*sj17))+(((0.000522093674235039)*r01*sj15*sj17))+(((-7.60541375298634e-6)*cj15*r01))+(((-0.165517825384755)*cj15*py*r02))+(((-0.0380270687649317)*pz*r02))+(((-0.00115982559733042)*cj15*r00))+(((-0.00115982559733042)*cj15*cj17*r00))+(((-0.165517825384755)*cj17*pz*r00*sj15))+(((((((-0.0004)*cj15*cj17*pz*r01))+(((0.061)*cj17*py*r02*sj15))+(((-1.22e-5)*r01*sj15*sj17))+(((0.061)*cj15*px*r02))+(((-2.0)*cj15*px*py*r00*sj17))+(((0.00660534531371531)*r02))+(((0.061)*py*r02*sj15))+(((-0.0004)*px*r00*sj17))+(((0.00352814063452146)*cj15*r01*sj17))+(((0.00468898517053305)*cj15*cj17*r01))+(((0.0004)*cj15*py*r02))+(((-0.061)*py*r00*sj17))+(((-0.0004)*cj15*pz*r01))+((r00*sj15*sj17*(px*px)))+(((-2.0)*cj17*px*pz*r00))+(((-0.0004)*px*r02*sj15))+(((0.00660534531371531)*cj17*r02))+(((0.00321248265077682)*r02*sj17))+(((-0.061)*cj15*cj17*pz*r00))+((r02*(py*py)))+(((-0.061)*pz*r01*sj15))+((r02*(px*px)))+(((-2.0)*cj17*py*pz*r01))+((cj15*r01*sj17*(px*px)))+(((-0.061)*cj17*pz*r01*sj15))+(((-1.0)*r00*sj15*sj17*(pz*pz)))+(((-0.0004)*py*r01*sj17))+(((-0.0004)*pz*r02*sj17))+(((-1.0)*cj17*r02*(pz*pz)))+(((-0.061)*cj15*pz*r00))+(((2.0)*px*pz*r02*sj15*sj17))+(((0.0004)*cj17*pz*r00*sj15))+(((-0.00468898517053305)*r00*sj15))+(((0.0004)*pz*r00*sj15))+(((-0.0004)*cj17*px*r02*sj15))+((cj17*r02*(py*py)))+(((0.00468898517053305)*cj15*r01))+(((-2.0)*cj15*py*pz*r02*sj17))+(((0.061)*cj15*cj17*px*r02))+(((-0.00352814063452146)*r00*sj15*sj17))+(((-2.0)*px*pz*r00))+(((0.061)*px*r01*sj17))+(((-1.0)*cj15*r01*sj17*(py*py)))+((cj15*r01*sj17*(pz*pz)))+(((-1.0)*r00*sj15*sj17*(py*py)))+(((-1.22e-5)*cj15*r00*sj17))+(((-0.00468898517053305)*cj17*r00*sj15))+((cj17*r02*(px*px)))+(((-2.0)*py*pz*r01))+(((0.0004)*cj15*cj17*py*r02))+(((2.0)*px*py*r01*sj15*sj17))+(((-1.0)*r02*(pz*pz)))))*(IKcos(j16))))+(((-3.42356507695108e-6)*r00*sj15*sj17))+(((7.60541375298634e-6)*cj17*r00*sj15))+(((-0.0722270687649317)*pz*r00*sj15*sj17))+(((0.165517825384755)*px*r02*sj15))+(((-0.0380270687649317)*cj17*pz*r02))+(((0.0722270687649317)*px*r02*sj15*sj17)));
evalcond[1]=((((-0.0722270687649317)*cj17*px*r02*sj15))+(((-0.000522093674235039)*cj17*r01*sj15))+(((-0.000522093674235039)*cj15*cj17*r00))+(((1.44454137529863e-5)*cj17*r02))+(((-0.165517825384755)*pz*r00*sj15*sj17))+(((0.0171178253847554)*px*r00))+(((0.000522093674235039)*cj15*r00))+(((-0.165517825384755)*cj15*py*r02*sj17))+(((7.60541375298634e-6)*r00*sj15*sj17))+(((((((-1.0)*cj17*r02*(px*px)))+(((0.0004)*px*r00*sj17))+(((-0.0004)*cj17*pz*r00*sj15))+(((-0.0004)*cj15*cj17*py*r02))+(((0.061)*cj15*px*r02))+(((2.0)*cj15*px*py*r00*sj17))+(((0.061)*py*r02*sj15))+(((0.0004)*cj15*py*r02))+(((-0.0004)*cj15*pz*r01))+(((-2.0)*px*py*r01*sj15*sj17))+(((0.00321248265077682)*cj15*cj17*r01))+(((-1.0)*cj17*r02*(py*py)))+(((-0.0004)*px*r02*sj15))+(((2.0)*cj15*py*pz*r02*sj17))+(((2.0)*cj17*py*pz*r01))+(((0.061)*cj15*cj17*pz*r00))+(((-1.0)*cj15*r01*sj17*(pz*pz)))+((r02*(py*py)))+(((0.0004)*py*r01*sj17))+(((-0.061)*pz*r01*sj15))+((r02*(px*px)))+(((0.0004)*cj17*px*r02*sj15))+(((-1.0)*cj15*r01*sj17*(px*px)))+(((0.00352822063452146)*r02))+((cj17*r02*(pz*pz)))+(((0.061)*py*r00*sj17))+(((-0.00660526531371531)*cj15*r01*sj17))+(((-0.00352822063452146)*cj17*r02))+(((-0.061)*cj15*pz*r00))+(((-0.061)*cj17*py*r02*sj15))+(((0.0004)*pz*r00*sj15))+(((0.0004)*cj15*cj17*pz*r01))+(((-0.061)*px*r01*sj17))+((r00*sj15*sj17*(py*py)))+(((0.0004)*pz*r02*sj17))+(((0.061)*cj17*pz*r01*sj15))+(((-0.00321248265077682)*cj17*r00*sj15))+(((-2.0)*px*pz*r00))+((r00*sj15*sj17*(pz*pz)))+(((1.22e-5)*r01*sj15*sj17))+((cj15*r01*sj17*(py*py)))+(((-1.0)*r00*sj15*sj17*(px*px)))+(((2.0)*cj17*px*pz*r00))+(((1.22e-5)*cj15*r00*sj17))+(((-0.00321248265077682)*cj15*r01))+(((0.00321248265077682)*r00*sj15))+(((0.00468898517053305)*r02*sj17))+(((-2.0)*py*pz*r01))+(((-0.061)*cj15*cj17*px*r02))+(((0.00660526531371531)*r00*sj15*sj17))+(((-1.0)*r02*(pz*pz)))+(((-2.0)*px*pz*r02*sj15*sj17))))*(IKsin(j16))))+(((0.0722270687649317)*cj17*pz*r00*sj15))+(((((((-1.22e-5)*cj15*r00))+(((-1.0)*cj15*r01*(py*py)))+(((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((-2.0)*cj15*px*py*r00))+(((0.0004)*cj17*pz*r02))+(((-0.00468898517053305)*r00*sj15*sj17))+(((2.0)*px*py*r01*sj15))+((r02*sj17*(py*py)))+(((-2.0)*py*pz*r01*sj17))+((cj15*r01*(pz*pz)))+(((0.0004)*cj15*py*r02*sj17))+(((0.00321248265077682)*r02))+(((-0.061)*pz*r01*sj15*sj17))+(((0.00468898517053305)*cj15*r01*sj17))+(((-0.0004)*py*r01))+(((0.00352814063452146)*cj15*r01))+(((-0.0004)*cj15*pz*r01*sj17))+(((-0.0004)*px*r00))+(((-0.00321248265077682)*cj17*r02))+(((-1.0)*r00*sj15*(pz*pz)))+(((1.22e-5)*cj17*r01*sj15))+(((0.00660534531371531)*r02*sj17))+(((0.061)*cj15*px*r02*sj17))+(((-1.0)*r00*sj15*(py*py)))+(((-2.0)*px*pz*r00*sj17))+((r02*sj17*(px*px)))+(((-0.0004)*pz*r02))+(((-0.00352814063452146)*cj15*cj17*r01))+(((-1.22e-5)*r01*sj15))+((r00*sj15*(px*px)))+(((-1.0)*r02*sj17*(pz*pz)))+(((0.061)*px*r01))+((cj17*r00*sj15*(pz*pz)))+(((2.0)*px*pz*r02*sj15))+(((-0.00352814063452146)*r00*sj15))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+((cj15*r01*(px*px)))+(((-0.061)*py*r00))+(((-2.0)*cj15*py*pz*r02))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((0.00352814063452146)*cj17*r00*sj15))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00))))*(IKcos(j16))))+(((0.165517825384755)*cj15*pz*r01*sj17))+(((-0.0171178253847554)*cj17*px*r00))+(((0.0722270687649317)*cj15*cj17*py*r02))+(((-0.0722270687649317)*pz*r00*sj15))+(((-0.0722270687649317)*cj15*cj17*pz*r01))+(((-0.0380270687649317)*pz*r02*sj17))+(((-3.31035650769511e-5)*r02*sj17))+(((0.0722270687649317)*px*r02*sj15))+(((-0.00115982559733042)*cj15*r00*sj17))+(((-0.0380270687649317)*py*r01*sj17))+(((-3.42356507695108e-6)*r00*sj15))+(((-0.00115982559733042)*r01*sj15*sj17))+(((-0.0380270687649317)*px*r00*sj17))+(((-3.42356507695108e-6)*cj15*cj17*r01))+(((0.0171178253847554)*pz*r02))+(((3.42356507695108e-6)*cj17*r00*sj15))+(((0.000522093674235039)*r01*sj15))+(((0.0171178253847554)*py*r01))+(((3.42356507695108e-6)*cj15*r01))+(((-7.60541375298634e-6)*cj15*r01*sj17))+(((-0.0171178253847554)*cj17*py*r01))+(((-0.0722270687649317)*cj15*py*r02))+(((0.165517825384755)*px*r02*sj15*sj17))+(((-1.44454137529863e-5)*r02))+(((-0.0171178253847554)*cj17*pz*r02))+(((0.0722270687649317)*cj15*pz*r01)));
evalcond[2]=((((-0.0660818946152446)*py*r01))+(((-3.75146102470137e-5)*cj15*r01*sj17))+(((-0.00572097806266958)*cj15*r00*sj17))+(((1.32163789230489e-5)*r00*sj15))+(((3.06746102470137e-5)*cj17*r02))+(((-0.0660818946152446)*cj17*px*r00))+(((-0.187573051235068)*py*r01*sj17))+(((-0.153373051235068)*cj15*cj17*pz*r01))+(((-0.00201549778576496)*cj15*cj17*r00))+(((-0.00572097806266958)*r01*sj15*sj17))+(((3.75146102470137e-5)*r00*sj15*sj17))+(((1.64636210769511e-5)*r02*sj17))+(((-0.187573051235068)*pz*r02*sj17))+(((-0.153373051235068)*cj17*px*r02*sj15))+(((-0.0823181053847554)*cj15*pz*r01*sj17))+(((-0.0660818946152446)*cj17*pz*r02))+(((((((-1.0)*cj17*r02*(px*px)))+(((0.0004)*px*r00*sj17))+(((0.061)*pz*r01*sj15))+(((-0.0004)*cj17*pz*r00*sj15))+(((-0.0004)*cj15*cj17*py*r02))+(((0.00766188837945855)*cj15*cj17*r01))+(((2.0)*cj15*px*py*r00*sj17))+(((-0.00617842279278522)*r02*sj17))+(((-0.061)*cj15*px*r02))+(((0.061)*cj15*pz*r00))+(((-2.0)*px*py*r01*sj15*sj17))+(((0.0004)*cj15*pz*r01))+(((-1.0)*cj17*r02*(py*py)))+(((2.0)*px*pz*r00))+(((-0.00708640726770731)*cj17*r02))+(((2.0)*cj15*py*pz*r02*sj17))+(((2.0)*cj17*py*pz*r01))+(((0.061)*cj15*cj17*pz*r00))+(((-1.0)*cj15*r01*sj17*(pz*pz)))+(((-0.00698410259547054)*r00*sj15*sj17))+(((0.0004)*py*r01*sj17))+(((-0.0004)*cj15*py*r02))+(((0.0004)*cj17*px*r02*sj15))+(((-0.061)*py*r02*sj15))+(((-1.0)*cj15*r01*sj17*(px*px)))+((cj17*r02*(pz*pz)))+(((0.061)*py*r00*sj17))+(((0.0004)*px*r02*sj15))+(((-0.061)*cj17*py*r02*sj15))+(((0.0004)*cj15*cj17*pz*r01))+(((-0.061)*px*r01*sj17))+((r00*sj15*sj17*(py*py)))+(((0.0004)*pz*r02*sj17))+(((0.061)*cj17*pz*r01*sj15))+((r00*sj15*sj17*(pz*pz)))+(((-0.00708640726770731)*r02))+(((-0.0004)*pz*r00*sj15))+(((1.22e-5)*r01*sj15*sj17))+((cj15*r01*sj17*(py*py)))+(((-1.0)*r00*sj15*sj17*(px*px)))+(((2.0)*cj17*px*pz*r00))+(((1.22e-5)*cj15*r00*sj17))+(((-0.00766188837945855)*cj17*r00*sj15))+(((0.00698410259547054)*cj15*r01*sj17))+(((-1.0)*r02*(px*px)))+(((-0.00766188837945855)*r00*sj15))+(((2.0)*py*pz*r01))+(((-0.061)*cj15*cj17*px*r02))+(((-1.0)*r02*(py*py)))+(((0.00766188837945855)*cj15*r01))+(((-2.0)*px*pz*r02*sj15*sj17))+((r02*(pz*pz)))))*(IKsin(j16))))+(((((((-2.0)*cj17*px*pz*r02*sj15))+(((0.0004)*cj17*py*r01))+(((-0.00617842279278522)*cj15*r01*sj17))+(((-0.00766188837945855)*r02))+(((0.0004)*pz*r02))+(((2.0)*cj15*py*pz*r02))+(((0.00708632726770731)*cj17*r00*sj15))+(((0.0004)*cj17*pz*r02))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r02*sj17*(py*py)))+((r00*sj15*(py*py)))+(((-0.00766188837945855)*cj17*r02))+(((-2.0)*py*pz*r01*sj17))+(((-1.0)*cj15*r01*(px*px)))+(((0.0004)*cj15*py*r02*sj17))+(((-0.061)*pz*r01*sj15*sj17))+(((-1.0)*r00*sj15*(px*px)))+(((-0.0004)*cj15*pz*r01*sj17))+(((2.0)*cj15*px*py*r00))+(((1.22e-5)*cj17*r01*sj15))+(((0.061)*cj15*px*r02*sj17))+(((-2.0)*px*pz*r00*sj17))+(((-0.061)*px*r01))+((r02*sj17*(px*px)))+(((-0.00708632726770731)*cj15*r01))+(((-2.0)*px*py*r01*sj15))+(((-1.0)*r02*sj17*(pz*pz)))+((cj15*r01*(py*py)))+((cj17*r00*sj15*(pz*pz)))+(((0.00708632726770731)*r00*sj15))+(((-0.00698402259547054)*r02*sj17))+(((1.22e-5)*cj15*cj17*r00))+(((-0.061)*cj17*px*r01))+(((-0.00708632726770731)*cj15*cj17*r01))+(((2.0)*cj15*cj17*py*pz*r02))+(((-2.0)*cj17*px*py*r01*sj15))+(((0.0004)*cj17*px*r00))+(((0.061)*py*r00))+(((0.0004)*px*r00))+(((-0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*cj17*px*py*r00))+(((-1.0)*cj17*r00*sj15*(px*px)))+((cj17*r00*sj15*(py*py)))+((cj15*cj17*r01*(py*py)))+(((-0.061)*cj15*pz*r00*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+(((0.00617842279278522)*r00*sj15*sj17))+((r00*sj15*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(pz*pz)))+(((-1.0)*cj15*cj17*r01*(px*px)))+(((0.0004)*pz*r00*sj15*sj17))+(((0.061)*py*r02*sj15*sj17))+(((0.061)*cj17*py*r00))))*(IKcos(j16))))+(((-0.00201549778576496)*cj17*r01*sj15))+(((0.153373051235068)*cj15*cj17*py*r02))+(((-0.0660818946152446)*cj17*py*r01))+(((1.32163789230489e-5)*cj17*r00*sj15))+(((0.153373051235068)*cj15*py*r02))+(((-1.32163789230489e-5)*cj15*r01))+(((3.06746102470137e-5)*r02))+(((0.0823181053847554)*cj15*py*r02*sj17))+(((-0.00201549778576496)*r01*sj15))+(((-0.153373051235068)*px*r02*sj15))+(((0.153373051235068)*cj17*pz*r00*sj15))+(((0.153373051235068)*pz*r00*sj15))+(((-0.153373051235068)*cj15*pz*r01))+(((-0.0660818946152446)*px*r00))+(((-0.00201549778576496)*cj15*r00))+(((-1.32163789230489e-5)*cj15*cj17*r01))+(((-0.187573051235068)*px*r00*sj17))+(((-0.0660818946152446)*pz*r02))+(((-0.0823181053847554)*px*r02*sj15*sj17))+(((0.0823181053847554)*pz*r00*sj15*sj17)));
evalcond[3]=((((0.153373051235068)*cj15*py*r02*sj17))+(((0.0823181053847554)*cj15*cj17*pz*r01))+(((-0.187573051235068)*px*r00))+(((-0.0823181053847554)*cj15*pz*r01))+(((0.187573051235068)*cj17*py*r01))+(((0.187573051235068)*cj17*pz*r02))+(((0.0823181053847554)*pz*r00*sj15))+(((-0.0823181053847554)*cj17*pz*r00*sj15))+(((((((-1.0)*cj17*r02*(px*px)))+(((0.0004)*px*r00*sj17))+(((-0.0004)*cj17*pz*r00*sj15))+(((0.00617842279278522)*r00*sj15))+(((-0.0004)*cj15*cj17*py*r02))+(((0.061)*cj15*px*r02))+(((2.0)*cj15*px*py*r00*sj17))+(((0.061)*py*r02*sj15))+(((-0.00698402259547054)*r02))+(((0.0004)*cj15*py*r02))+(((0.00617842279278522)*cj15*cj17*r01))+(((-0.0004)*cj15*pz*r01))+(((-0.00617842279278522)*cj15*r01))+(((-2.0)*px*py*r01*sj15*sj17))+(((-1.0)*cj17*r02*(py*py)))+(((-0.0004)*px*r02*sj15))+(((-0.00766188837945855)*r02*sj17))+(((2.0)*cj15*py*pz*r02*sj17))+(((2.0)*cj17*py*pz*r01))+(((0.061)*cj15*cj17*pz*r00))+(((-1.0)*cj15*r01*sj17*(pz*pz)))+((r02*(py*py)))+(((0.0004)*py*r01*sj17))+(((-0.061)*pz*r01*sj15))+((r02*(px*px)))+(((0.0004)*cj17*px*r02*sj15))+(((-1.0)*cj15*r01*sj17*(px*px)))+((cj17*r02*(pz*pz)))+(((-0.00708632726770731)*cj15*r01*sj17))+(((0.061)*py*r00*sj17))+(((0.00708632726770731)*r00*sj15*sj17))+(((-0.061)*cj15*pz*r00))+(((-0.061)*cj17*py*r02*sj15))+(((0.0004)*pz*r00*sj15))+(((0.0004)*cj15*cj17*pz*r01))+(((-0.061)*px*r01*sj17))+((r00*sj15*sj17*(py*py)))+(((0.0004)*pz*r02*sj17))+(((0.061)*cj17*pz*r01*sj15))+(((-2.0)*px*pz*r00))+((r00*sj15*sj17*(pz*pz)))+(((1.22e-5)*r01*sj15*sj17))+((cj15*r01*sj17*(py*py)))+(((-1.0)*r00*sj15*sj17*(px*px)))+(((2.0)*cj17*px*pz*r00))+(((1.22e-5)*cj15*r00*sj17))+(((0.00698402259547054)*cj17*r02))+(((-2.0)*py*pz*r01))+(((-0.061)*cj15*cj17*px*r02))+(((-0.00617842279278522)*cj17*r00*sj15))+(((-1.0)*r02*(pz*pz)))+(((-2.0)*px*pz*r02*sj15*sj17))))*(IKcos(j16))))+(((-0.00572097806266958)*cj15*r00))+(((0.0823181053847554)*cj15*py*r02))+(((((((-1.0)*cj17*r00*sj15*(pz*pz)))+(((-0.00708640726770731)*r02*sj17))+(((-0.0004)*cj17*px*r00))+(((0.0004)*pz*r02))+(((-1.22e-5)*cj15*cj17*r00))+(((2.0)*cj15*py*pz*r02))+(((0.00698410259547054)*cj17*r00*sj15))+(((-1.0)*cj15*r01*(pz*pz)))+(((1.22e-5)*cj15*r00))+((r00*sj15*(py*py)))+(((-1.0)*cj17*r00*sj15*(py*py)))+(((-1.0)*cj15*r01*(px*px)))+(((-0.0004)*pz*r00*sj15*sj17))+(((-1.0)*cj15*cj17*r01*(py*py)))+(((-1.0)*r00*sj15*(px*px)))+(((-0.061)*cj15*px*r02*sj17))+(((0.061)*cj15*pz*r00*sj17))+(((0.00766188837945855)*cj15*r01*sj17))+(((0.0004)*px*r02*sj15*sj17))+(((2.0)*cj15*px*py*r00))+(((-0.0004)*cj17*py*r01))+(((2.0)*cj17*px*pz*r02*sj15))+(((-0.061)*px*r01))+(((-2.0)*cj15*cj17*px*py*r00))+(((-0.00617842279278522)*r02))+(((-0.0004)*cj17*pz*r02))+(((0.00617842279278522)*cj17*r02))+(((-2.0)*px*py*r01*sj15))+(((0.00698410259547054)*cj15*r01))+(((-0.00766188837945855)*r00*sj15*sj17))+((r02*sj17*(pz*pz)))+(((-0.00698410259547054)*r00*sj15))+(((-0.00698410259547054)*cj15*cj17*r01))+(((-1.0)*r02*sj17*(py*py)))+(((-1.22e-5)*cj17*r01*sj15))+((cj15*r01*(py*py)))+(((2.0)*py*pz*r01*sj17))+(((2.0)*cj17*px*py*r01*sj15))+(((0.061)*cj17*px*r01))+(((0.061)*py*r00))+(((-0.061)*py*r02*sj15*sj17))+(((-2.0)*cj15*cj17*py*pz*r02))+(((0.0004)*px*r00))+(((2.0)*px*pz*r00*sj17))+(((-1.0)*r02*sj17*(px*px)))+((cj17*r00*sj15*(px*px)))+(((0.0004)*cj15*pz*r01*sj17))+(((-0.0004)*cj15*py*r02*sj17))+(((-2.0)*px*pz*r02*sj15))+(((1.22e-5)*r01*sj15))+(((0.0004)*py*r01))+(((-0.061)*cj17*py*r00))+((r00*sj15*(pz*pz)))+((cj15*cj17*r01*(px*px)))+(((0.061)*pz*r01*sj15*sj17))+((cj15*cj17*r01*(pz*pz)))))*(IKsin(j16))))+(((0.153373051235068)*pz*r00*sj15*sj17))+(((3.75146102470137e-5)*r00*sj15))+(((-0.187573051235068)*pz*r02))+(((-3.75146102470137e-5)*cj17*r00*sj15))+(((-1.32163789230489e-5)*cj15*r01*sj17))+(((3.75146102470137e-5)*cj15*cj17*r01))+(((0.187573051235068)*cj17*px*r00))+(((-0.00201549778576496)*r01*sj15*sj17))+(((-0.00572097806266958)*r01*sj15))+(((0.00572097806266958)*cj17*r01*sj15))+(((1.64636210769511e-5)*r02))+(((3.06746102470137e-5)*r02*sj17))+(((-0.0660818946152446)*py*r01*sj17))+(((-1.64636210769511e-5)*cj17*r02))+(((-0.153373051235068)*px*r02*sj15*sj17))+(((-0.187573051235068)*py*r01))+(((-0.153373051235068)*cj15*pz*r01*sj17))+(((-0.00201549778576496)*cj15*r00*sj17))+(((-0.0823181053847554)*px*r02*sj15))+(((-3.75146102470137e-5)*cj15*r01))+(((0.0823181053847554)*cj17*px*r02*sj15))+(((1.32163789230489e-5)*r00*sj15*sj17))+(((-0.0660818946152446)*pz*r02*sj17))+(((-0.0823181053847554)*cj15*cj17*py*r02))+(((0.00572097806266958)*cj15*cj17*r00))+(((-0.0660818946152446)*px*r00*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x230=((5.00197984865329)*cj17);
IkReal x231=(pz*sj16);
IkReal x232=(cj15*py);
IkReal x233=((5.00197984865329)*sj17);
IkReal x234=(px*sj15);
IkReal x235=(cj16*pz);
IkReal x236=((20.2227832716915)*cj17);
IkReal x237=((0.0040445566543383)*cj16);
IkReal x238=((0.00100039596973066)*sj16);
IkReal x239=((20.2227832716915)*sj17);
IkReal x240=((0.00100039596973066)*cj16);
IkReal x241=((0.0040445566543383)*sj16);
if( IKabs(((-1.58606437417148)+(((-1.0)*cj16*x233*x234))+((sj16*x232*x239))+((sj17*x241))+((sj17*x240))+(((-1.0)*x235*x239))+(((-1.0)*sj16*x234*x239))+((x230*x235))+(((-1.0)*cj17*x238))+(((-0.138520662932913)*cj17))+(((-1.0)*cj16*x234*x236))+(((-1.0)*sj16*x230*x232))+((cj16*x232*x233))+((cj16*x232*x236))+((cj17*x237))+(((-1.2446064139203)*sj17))+((x231*x236))+((x231*x233))+((sj16*x230*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0253373108241496)+(((-1.0)*cj16*x230*x232))+(((-0.138520662932913)*sj17))+(((-1.0)*x230*x231))+((sj16*x234*x236))+(((-1.0)*sj17*x238))+(((1.2446064139203)*cj17))+((x233*x235))+((sj17*x237))+((x235*x236))+((cj16*x230*x234))+(((-1.0)*cj16*x234*x239))+((cj16*x232*x239))+((x231*x239))+(((-1.0)*cj17*x241))+(((-1.0)*cj17*x240))+((sj16*x233*x234))+(((-1.0)*sj16*x232*x233))+(((-1.0)*sj16*x232*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.58606437417148)+(((-1.0)*cj16*x233*x234))+((sj16*x232*x239))+((sj17*x241))+((sj17*x240))+(((-1.0)*x235*x239))+(((-1.0)*sj16*x234*x239))+((x230*x235))+(((-1.0)*cj17*x238))+(((-0.138520662932913)*cj17))+(((-1.0)*cj16*x234*x236))+(((-1.0)*sj16*x230*x232))+((cj16*x232*x233))+((cj16*x232*x236))+((cj17*x237))+(((-1.2446064139203)*sj17))+((x231*x236))+((x231*x233))+((sj16*x230*x234))))+IKsqr(((0.0253373108241496)+(((-1.0)*cj16*x230*x232))+(((-0.138520662932913)*sj17))+(((-1.0)*x230*x231))+((sj16*x234*x236))+(((-1.0)*sj17*x238))+(((1.2446064139203)*cj17))+((x233*x235))+((sj17*x237))+((x235*x236))+((cj16*x230*x234))+(((-1.0)*cj16*x234*x239))+((cj16*x232*x239))+((x231*x239))+(((-1.0)*cj17*x241))+(((-1.0)*cj17*x240))+((sj16*x233*x234))+(((-1.0)*sj16*x232*x233))+(((-1.0)*sj16*x232*x236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-1.58606437417148)+(((-1.0)*cj16*x233*x234))+((sj16*x232*x239))+((sj17*x241))+((sj17*x240))+(((-1.0)*x235*x239))+(((-1.0)*sj16*x234*x239))+((x230*x235))+(((-1.0)*cj17*x238))+(((-0.138520662932913)*cj17))+(((-1.0)*cj16*x234*x236))+(((-1.0)*sj16*x230*x232))+((cj16*x232*x233))+((cj16*x232*x236))+((cj17*x237))+(((-1.2446064139203)*sj17))+((x231*x236))+((x231*x233))+((sj16*x230*x234))), ((0.0253373108241496)+(((-1.0)*cj16*x230*x232))+(((-0.138520662932913)*sj17))+(((-1.0)*x230*x231))+((sj16*x234*x236))+(((-1.0)*sj17*x238))+(((1.2446064139203)*cj17))+((x233*x235))+((sj17*x237))+((x235*x236))+((cj16*x230*x234))+(((-1.0)*cj16*x234*x239))+((cj16*x232*x239))+((x231*x239))+(((-1.0)*cj17*x241))+(((-1.0)*cj17*x240))+((sj16*x233*x234))+(((-1.0)*sj16*x232*x233))+(((-1.0)*sj16*x232*x236))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[4];
IkReal x242=IKcos(j18);
IkReal x243=IKsin(j18);
IkReal x244=((1.0)*cj16);
IkReal x245=((0.707106781186548)*cj19);
IkReal x246=(cj15*sj16);
IkReal x247=(px*sj15);
IkReal x248=(cj15*cj16);
IkReal x249=((1.0)*r00*sj15);
IkReal x250=(sj17*x243);
IkReal x251=(cj17*x243);
IkReal x252=(sj17*x242);
IkReal x253=(cj17*x242);
IkReal x254=(x245*x252);
IkReal x255=(x245*x250);
IkReal x256=(x245*x251);
IkReal x257=(x245*x253);
IkReal x258=(x254+x256);
evalcond[0]=((-0.02079993)+(((0.01152581)*x253))+(((-0.04659834)*x252))+(((-0.04659834)*x251))+(((0.0002)*cj16))+((pz*sj16))+(((-0.0742)*cj17))+(((-0.01152581)*x250))+((py*x248))+(((-0.0171)*sj17))+(((-1.0)*x244*x247)));
evalcond[1]=((-0.05640003)+(((-0.0742)*sj17))+(((-1.0)*pz*x244))+(((0.0171)*cj17))+(((0.01152581)*x252))+(((0.01152581)*x251))+(((-0.04659834)*x250))+(((0.04659834)*x253))+((py*x246))+(((0.0002)*sj16))+(((-1.0)*sj16*x247)));
evalcond[2]=(((r02*sj16))+(((-1.0)*r00*sj15*x244))+x258+x257+((r01*x248))+(((-1.0)*x255)));
evalcond[3]=(x258+x255+(((-1.0)*r02*x244))+((r01*x246))+(((-1.0)*sj16*x249))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - daedalus (69868a6ae01d2fb3d97d8bf022f407ef)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
